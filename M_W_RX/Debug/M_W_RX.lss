
M_W_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002ce8  00002d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000f6  008000f6  00002e12  2**0
                  ALLOC
  3 .stab         00002364  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bcc  00000000  00000000  00005178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009179  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000adcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c2 15 	jmp	0x2b84	; 0x2b84 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 12 	call	0x24fa	; 0x24fa <main>
      8a:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ee       	ldi	r22, 0xEB	; 235
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <timer1_delay_1s>:

#include "timer.h"
void timer1_delay_1s()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
 TCNT1=0;
     ca6:	ec e4       	ldi	r30, 0x4C	; 76
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1
 OCR1A=2000;
     cae:	ea e4       	ldi	r30, 0x4A	; 74
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 ed       	ldi	r24, 0xD0	; 208
     cb4:	97 e0       	ldi	r25, 0x07	; 7
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
 TCCR1A=0;
     cba:	ef e4       	ldi	r30, 0x4F	; 79
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	10 82       	st	Z, r1
 TCCR1B=(1<<CS12)|(1<<WGM12);
     cc0:	ee e4       	ldi	r30, 0x4E	; 78
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8c e0       	ldi	r24, 0x0C	; 12
     cc6:	80 83       	st	Z, r24
 while( ( TIFR & (1<<OCF1A) ) ==0 );
     cc8:	e8 e5       	ldi	r30, 0x58	; 88
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	80 71       	andi	r24, 0x10	; 16
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	b9 f3       	breq	.-18     	; 0xcc8 <timer1_delay_1s+0x2a>
 TIFR=(1<<OCF1A);
     cda:	e8 e5       	ldi	r30, 0x58	; 88
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 e1       	ldi	r24, 0x10	; 16
     ce0:	80 83       	st	Z, r24

}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <pwm_timer0>:

void pwm_timer0(uint8_t duty_cycle)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	0f 92       	push	r0
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	89 83       	std	Y+1, r24	; 0x01
	DDRB|=1<<3;
     cf4:	a7 e3       	ldi	r26, 0x37	; 55
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e7 e3       	ldi	r30, 0x37	; 55
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	88 60       	ori	r24, 0x08	; 8
     d00:	8c 93       	st	X, r24
	OCR0=(256*duty_cycle/100)-1;
     d02:	ec e5       	ldi	r30, 0x5C	; 92
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	98 2f       	mov	r25, r24
     d0e:	88 27       	eor	r24, r24
     d10:	24 e6       	ldi	r18, 0x64	; 100
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	b9 01       	movw	r22, r18
     d16:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__divmodhi4>
     d1a:	cb 01       	movw	r24, r22
     d1c:	81 50       	subi	r24, 0x01	; 1
     d1e:	80 83       	st	Z, r24
	TCCR0=0x64;
     d20:	e3 e5       	ldi	r30, 0x53	; 83
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	84 e6       	ldi	r24, 0x64	; 100
     d26:	80 83       	st	Z, r24

}
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <iniatUart>:
#include "uart.h"


void iniatUart(uint16_t baudrate )
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <iniatUart+0x6>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <iniatUart+0x8>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9c 83       	std	Y+4, r25	; 0x04
     d3e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t ubrr= (osc/16/baudrate) - 1;
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	9c 01       	movw	r18, r24
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	80 e2       	ldi	r24, 0x20	; 32
     d4c:	91 ea       	ldi	r25, 0xA1	; 161
     d4e:	a7 e0       	ldi	r26, 0x07	; 7
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__divmodsi4>
     d5a:	da 01       	movw	r26, r20
     d5c:	c9 01       	movw	r24, r18
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
	UCSRC= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     d64:	e0 e4       	ldi	r30, 0x40	; 64
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	86 e8       	ldi	r24, 0x86	; 134
     d6a:	80 83       	st	Z, r24
	UCSRB= (1<<RXEN)| (1<<TXEN);
     d6c:	ea e2       	ldi	r30, 0x2A	; 42
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	88 e1       	ldi	r24, 0x18	; 24
     d72:	80 83       	st	Z, r24
	UBRRH=ubrr>>8;
     d74:	e0 e4       	ldi	r30, 0x40	; 64
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	89 2f       	mov	r24, r25
     d7e:	99 27       	eor	r25, r25
     d80:	80 83       	st	Z, r24
	UBRRL=(uint8_t)ubrr;
     d82:	e9 e2       	ldi	r30, 0x29	; 41
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	80 83       	st	Z, r24
	
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <sendChar>:
void sendChar(char ch)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
	while( ( UCSRA & (1<<UDRE) ) == 0 );
     da4:	eb e2       	ldi	r30, 0x2B	; 43
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	80 72       	andi	r24, 0x20	; 32
     db0:	90 70       	andi	r25, 0x00	; 0
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	b9 f3       	breq	.-18     	; 0xda4 <sendChar+0xc>
	UDR=ch;
     db6:	ec e2       	ldi	r30, 0x2C	; 44
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	80 83       	st	Z, r24
}
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <receiveChar>:
char receiveChar()
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	
	while (  (UCSRA & (1<<RXC)  ) ==0 );
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	88 23       	and	r24, r24
     dd6:	dc f7       	brge	.-10     	; 0xdce <receiveChar+0x8>
	return UDR;
     dd8:	ec e2       	ldi	r30, 0x2C	; 44
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <str_copy>:




void str_copy(char *source,char *destination)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <str_copy+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <str_copy+0x8>
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	9b 83       	std	Y+3, r25	; 0x03
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	7d 83       	std	Y+5, r23	; 0x05
     df8:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i=0;
     dfa:	19 82       	std	Y+1, r1	; 0x01
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <str_copy+0x20>
    while( (source[i]=destination[i]) )
    {

        i++;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	8f 5f       	subi	r24, 0xFF	; 255
     e02:	89 83       	std	Y+1, r24	; 0x01


void str_copy(char *source,char *destination)
{
    uint8_t i=0;
    while( (source[i]=destination[i]) )
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	9b 81       	ldd	r25, Y+3	; 0x03
     e0e:	dc 01       	movw	r26, r24
     e10:	a2 0f       	add	r26, r18
     e12:	b3 1f       	adc	r27, r19
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	fc 01       	movw	r30, r24
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	80 81       	ld	r24, Z
     e26:	8c 93       	st	X, r24
     e28:	8c 91       	ld	r24, X
     e2a:	88 23       	and	r24, r24
     e2c:	41 f7       	brne	.-48     	; 0xdfe <str_copy+0x1a>
    {

        i++;
    }
}
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <str_equal>:
uint8_t str_equal(char *str1,char *str2)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2a 97       	sbiw	r28, 0x0a	; 10
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	9d 83       	std	Y+5, r25	; 0x05
     e54:	8c 83       	std	Y+4, r24	; 0x04
     e56:	7f 83       	std	Y+7, r23	; 0x07
     e58:	6e 83       	std	Y+6, r22	; 0x06
    uint8_t size1=0,size2=0,is_equal=1;
     e5a:	1b 82       	std	Y+3, r1	; 0x03
     e5c:	1a 82       	std	Y+2, r1	; 0x02
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	89 83       	std	Y+1, r24	; 0x01

    while(str1[size1++] !=0);
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	fc 01       	movw	r30, r24
     e6e:	e2 0f       	add	r30, r18
     e70:	f3 1f       	adc	r31, r19
     e72:	80 81       	ld	r24, Z
     e74:	89 87       	std	Y+9, r24	; 0x09
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	88 23       	and	r24, r24
     e7a:	11 f0       	breq	.+4      	; 0xe80 <str_equal+0x42>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	89 87       	std	Y+9, r24	; 0x09
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	9f 5f       	subi	r25, 0xFF	; 255
     e86:	9b 83       	std	Y+3, r25	; 0x03
     e88:	88 23       	and	r24, r24
     e8a:	59 f7       	brne	.-42     	; 0xe62 <str_equal+0x24>
    while(str2[size2++] !=0);
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	9f 81       	ldd	r25, Y+7	; 0x07
     e96:	fc 01       	movw	r30, r24
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	80 81       	ld	r24, Z
     e9e:	8a 87       	std	Y+10, r24	; 0x0a
     ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea2:	88 23       	and	r24, r24
     ea4:	11 f0       	breq	.+4      	; 0xeaa <str_equal+0x6c>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	8a 87       	std	Y+10, r24	; 0x0a
     eaa:	8a 85       	ldd	r24, Y+10	; 0x0a
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	9f 5f       	subi	r25, 0xFF	; 255
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	88 23       	and	r24, r24
     eb4:	59 f7       	brne	.-42     	; 0xe8c <str_equal+0x4e>
    if(size1 != size2)
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	98 17       	cp	r25, r24
     ebc:	11 f0       	breq	.+4      	; 0xec2 <str_equal+0x84>
    {
        is_equal=0;
     ebe:	19 82       	std	Y+1, r1	; 0x01
     ec0:	28 c0       	rjmp	.+80     	; 0xf12 <str_equal+0xd4>
    }
    else
    {
        for(--size1;size1 > 0;size1 --)
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	81 50       	subi	r24, 0x01	; 1
     ec6:	8b 83       	std	Y+3, r24	; 0x03
     ec8:	21 c0       	rjmp	.+66     	; 0xf0c <str_equal+0xce>
        {
            if( str1[size1-1] != str2[size1-1])
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 01       	movw	r18, r24
     ed2:	21 50       	subi	r18, 0x01	; 1
     ed4:	30 40       	sbci	r19, 0x00	; 0
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	fc 01       	movw	r30, r24
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	40 81       	ld	r20, Z
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 01       	movw	r18, r24
     eea:	21 50       	subi	r18, 0x01	; 1
     eec:	30 40       	sbci	r19, 0x00	; 0
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	fc 01       	movw	r30, r24
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	80 81       	ld	r24, Z
     efa:	48 17       	cp	r20, r24
     efc:	21 f0       	breq	.+8      	; 0xf06 <str_equal+0xc8>
                return is_equal=0;
     efe:	19 82       	std	Y+1, r1	; 0x01
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 87       	std	Y+8, r24	; 0x08
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <str_equal+0xd8>
    {
        is_equal=0;
    }
    else
    {
        for(--size1;size1 > 0;size1 --)
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	81 50       	subi	r24, 0x01	; 1
     f0a:	8b 83       	std	Y+3, r24	; 0x03
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 23       	and	r24, r24
     f10:	e1 f6       	brne	.-72     	; 0xeca <str_equal+0x8c>
        {
            if( str1[size1-1] != str2[size1-1])
                return is_equal=0;
        }
    }
    return is_equal;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 87       	std	Y+8, r24	; 0x08
     f16:	88 85       	ldd	r24, Y+8	; 0x08
}
     f18:	2a 96       	adiw	r28, 0x0a	; 10
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <str_len>:
uint8_t str_len(char *str)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <str_len+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <str_len+0x8>
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	9b 83       	std	Y+3, r25	; 0x03
     f38:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t size=0;
     f3a:	19 82       	std	Y+1, r1	; 0x01
    while(str[size++]!=0);
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	80 81       	ld	r24, Z
     f4e:	8c 83       	std	Y+4, r24	; 0x04
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	88 23       	and	r24, r24
     f54:	11 f0       	breq	.+4      	; 0xf5a <str_len+0x30>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	8c 83       	std	Y+4, r24	; 0x04
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	99 81       	ldd	r25, Y+1	; 0x01
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	99 83       	std	Y+1, r25	; 0x01
     f62:	88 23       	and	r24, r24
     f64:	59 f7       	brne	.-42     	; 0xf3c <str_len+0x12>

    return --size;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	81 50       	subi	r24, 0x01	; 1
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <intToString>:

char * intToString(uint16_t num)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <intToString+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <intToString+0x8>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9d 83       	std	Y+5, r25	; 0x05
     f8c:	8c 83       	std	Y+4, r24	; 0x04
    static  char str[8];
    char temp;
	uint8_t size=0;
     f8e:	1a 82       	std	Y+2, r1	; 0x02

	if(num<10)
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	8a 30       	cpi	r24, 0x0A	; 10
     f96:	91 05       	cpc	r25, r1
     f98:	40 f5       	brcc	.+80     	; 0xfea <intToString+0x6e>
	{
		str[size++]=num+0x30;
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	80 5d       	subi	r24, 0xD0	; 208
     fa4:	f9 01       	movw	r30, r18
     fa6:	ea 50       	subi	r30, 0x0A	; 10
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 83       	st	Z, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	8a 83       	std	Y+2, r24	; 0x02
     fb2:	58 c0       	rjmp	.+176    	; 0x1064 <intToString+0xe8>
	else
	{

	    while(num)
		{
			str[size]= (num%10)+0x30;
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	e8 2f       	mov	r30, r24
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	2a e0       	ldi	r18, 0x0A	; 10
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	b9 01       	movw	r22, r18
     fc4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__udivmodhi4>
     fc8:	80 5d       	subi	r24, 0xD0	; 208
     fca:	ea 50       	subi	r30, 0x0A	; 10
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 83       	st	Z, r24
			num/=10;
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	b9 01       	movw	r22, r18
     fda:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__udivmodhi4>
     fde:	cb 01       	movw	r24, r22
     fe0:	9d 83       	std	Y+5, r25	; 0x05
     fe2:	8c 83       	std	Y+4, r24	; 0x04
			size++;
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	8a 83       	std	Y+2, r24	; 0x02
	}

	else
	{

	    while(num)
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	09 f7       	brne	.-62     	; 0xfb4 <intToString+0x38>
			str[size]= (num%10)+0x30;
			num/=10;
			size++;
		}

	   for (uint8_t i=0  ;i < (size/2) ;i++)
     ff2:	19 82       	std	Y+1, r1	; 0x01
     ff4:	31 c0       	rjmp	.+98     	; 0x1058 <intToString+0xdc>
		{
			temp=str[i];
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	fc 01       	movw	r30, r24
     ffe:	ea 50       	subi	r30, 0x0A	; 10
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	80 81       	ld	r24, Z
    1004:	8b 83       	std	Y+3, r24	; 0x03
			str[i]=(str[size-i-1]);
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	48 2f       	mov	r20, r24
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	b9 01       	movw	r22, r18
    101a:	68 1b       	sub	r22, r24
    101c:	79 0b       	sbc	r23, r25
    101e:	cb 01       	movw	r24, r22
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	fc 01       	movw	r30, r24
    1024:	ea 50       	subi	r30, 0x0A	; 10
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	fa 01       	movw	r30, r20
    102c:	ea 50       	subi	r30, 0x0A	; 10
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 83       	st	Z, r24
			str[size-i-1]=temp;
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	48 1b       	sub	r20, r24
    1042:	59 0b       	sbc	r21, r25
    1044:	ca 01       	movw	r24, r20
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	fc 01       	movw	r30, r24
    104a:	ea 50       	subi	r30, 0x0A	; 10
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	80 83       	st	Z, r24
			str[size]= (num%10)+0x30;
			num/=10;
			size++;
		}

	   for (uint8_t i=0  ;i < (size/2) ;i++)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	98 2f       	mov	r25, r24
    105c:	96 95       	lsr	r25
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	89 17       	cp	r24, r25
    1062:	48 f2       	brcs	.-110    	; 0xff6 <intToString+0x7a>
			str[i]=(str[size-i-1]);
			str[size-i-1]=temp;
		}
	}

	str[size]=0;
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	fc 01       	movw	r30, r24
    106c:	ea 50       	subi	r30, 0x0A	; 10
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	10 82       	st	Z, r1
	return str;
    1072:	86 ef       	ldi	r24, 0xF6	; 246
    1074:	90 e0       	ldi	r25, 0x00	; 0
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <LCDIntiat>:

static void proper_row();
static uint8_t _row=1;
static uint8_t _column=1;
void LCDIntiat()
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	2e 97       	sbiw	r28, 0x0e	; 14
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
	
	LCD_CDDR|=(1<<EN)|(1<<RS);
    109a:	aa e3       	ldi	r26, 0x3A	; 58
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8c 60       	ori	r24, 0x0C	; 12
    10a6:	8c 93       	st	X, r24
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 e7       	ldi	r26, 0x70	; 112
    10ae:	b1 e4       	ldi	r27, 0x41	; 65
    10b0:	8b 87       	std	Y+11, r24	; 0x0b
    10b2:	9c 87       	std	Y+12, r25	; 0x0c
    10b4:	ad 87       	std	Y+13, r26	; 0x0d
    10b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    10bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10be:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4a ef       	ldi	r20, 0xFA	; 250
    10c6:	54 e4       	ldi	r21, 0x44	; 68
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	8f 83       	std	Y+7, r24	; 0x07
    10d2:	98 87       	std	Y+8, r25	; 0x08
    10d4:	a9 87       	std	Y+9, r26	; 0x09
    10d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e8       	ldi	r20, 0x80	; 128
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ec:	88 23       	and	r24, r24
    10ee:	2c f4       	brge	.+10     	; 0x10fa <LCDIntiat+0x74>
		__ticks = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
    10f8:	3f c0       	rjmp	.+126    	; 0x1178 <LCDIntiat+0xf2>
	else if (__tmp > 65535)
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    110e:	18 16       	cp	r1, r24
    1110:	4c f5       	brge	.+82     	; 0x1164 <LCDIntiat+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1112:	6b 85       	ldd	r22, Y+11	; 0x0b
    1114:	7c 85       	ldd	r23, Y+12	; 0x0c
    1116:	8d 85       	ldd	r24, Y+13	; 0x0d
    1118:	9e 85       	ldd	r25, Y+14	; 0x0e
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e2       	ldi	r20, 0x20	; 32
    1120:	51 e4       	ldi	r21, 0x41	; 65
    1122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	0f c0       	rjmp	.+30     	; 0x115a <LCDIntiat+0xd4>
    113c:	88 ec       	ldi	r24, 0xC8	; 200
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <LCDIntiat+0xc2>
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	69 f7       	brne	.-38     	; 0x113c <LCDIntiat+0xb6>
    1162:	14 c0       	rjmp	.+40     	; 0x118c <LCDIntiat+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1164:	6f 81       	ldd	r22, Y+7	; 0x07
    1166:	78 85       	ldd	r23, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <LCDIntiat+0xfe>
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15); //wait till  lcd fully powered up
	#ifdef _4bitMode
	LCD_DDDR|=0xf0;
    118c:	aa e3       	ldi	r26, 0x3A	; 58
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ea e3       	ldi	r30, 0x3A	; 58
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	80 6f       	ori	r24, 0xF0	; 240
    1198:	8c 93       	st	X, r24
	//LCDSendCmd(0x33);
	LCDSendCmd(0x32);
    119a:	82 e3       	ldi	r24, 0x32	; 50
    119c:	0e 94 ed 08 	call	0x11da	; 0x11da <LCDSendCmd>
	LCDSendCmd(0x28);
    11a0:	88 e2       	ldi	r24, 0x28	; 40
    11a2:	0e 94 ed 08 	call	0x11da	; 0x11da <LCDSendCmd>

	#else
	LCD_DDDR=0xff;
	LCDSendCmd(0x38);
	#endif
	LCDSendCmd(0x0C);
    11a6:	8c e0       	ldi	r24, 0x0C	; 12
    11a8:	0e 94 ed 08 	call	0x11da	; 0x11da <LCDSendCmd>
	LCDSendCmd(0x01);
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	0e 94 ed 08 	call	0x11da	; 0x11da <LCDSendCmd>
	//LCDSendCmd(0x0f);
	
	LCDRowColumn(1,1);
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
	_row=_column=1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 f4 00 	sts	0x00F4, r24
    11c0:	80 91 f4 00 	lds	r24, 0x00F4
    11c4:	80 93 f3 00 	sts	0x00F3, r24


}
    11c8:	2e 96       	adiw	r28, 0x0e	; 14
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <LCDSendCmd>:

void LCDSendCmd(uint8_t cmd)
{
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	c9 57       	subi	r28, 0x79	; 121
    11e8:	d0 40       	sbci	r29, 0x00	; 0
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	fe 01       	movw	r30, r28
    11f6:	e7 58       	subi	r30, 0x87	; 135
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 83       	st	Z, r24
	LCD_CPORT&=~(1<<RS);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8b 7f       	andi	r24, 0xFB	; 251
    1208:	8c 93       	st	X, r24
	#ifdef _4bitMode
	//4 bit mode
	LCD_DPORT=(LCD_DPORT&0x0f)|(cmd&0xf0);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	98 2f       	mov	r25, r24
    1216:	9f 70       	andi	r25, 0x0F	; 15
    1218:	fe 01       	movw	r30, r28
    121a:	e7 58       	subi	r30, 0x87	; 135
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 81       	ld	r24, Z
    1220:	80 7f       	andi	r24, 0xF0	; 240
    1222:	89 2b       	or	r24, r25
    1224:	8c 93       	st	X, r24
	LCD_CPORT|=(1<<EN);
    1226:	ab e3       	ldi	r26, 0x3B	; 59
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	eb e3       	ldi	r30, 0x3B	; 59
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	88 60       	ori	r24, 0x08	; 8
    1232:	8c 93       	st	X, r24
    1234:	fe 01       	movw	r30, r28
    1236:	eb 58       	subi	r30, 0x8B	; 139
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	bf e3       	ldi	r27, 0x3F	; 63
    1242:	80 83       	st	Z, r24
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	a2 83       	std	Z+2, r26	; 0x02
    1248:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    124a:	8e 01       	movw	r16, r28
    124c:	0f 58       	subi	r16, 0x8F	; 143
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	fe 01       	movw	r30, r28
    1252:	eb 58       	subi	r30, 0x8B	; 139
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	60 81       	ld	r22, Z
    1258:	71 81       	ldd	r23, Z+1	; 0x01
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	2b ea       	ldi	r18, 0xAB	; 171
    1260:	3a ea       	ldi	r19, 0xAA	; 170
    1262:	4a e2       	ldi	r20, 0x2A	; 42
    1264:	50 e4       	ldi	r21, 0x40	; 64
    1266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	f8 01       	movw	r30, r16
    1270:	80 83       	st	Z, r24
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	a2 83       	std	Z+2, r26	; 0x02
    1276:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1278:	fe 01       	movw	r30, r28
    127a:	ef 58       	subi	r30, 0x8F	; 143
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	60 81       	ld	r22, Z
    1280:	71 81       	ldd	r23, Z+1	; 0x01
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1292:	88 23       	and	r24, r24
    1294:	34 f4       	brge	.+12     	; 0x12a2 <LCDSendCmd+0xc8>
		__ticks = 1;
    1296:	fe 01       	movw	r30, r28
    1298:	e0 59       	subi	r30, 0x90	; 144
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 83       	st	Z, r24
    12a0:	e0 c0       	rjmp	.+448    	; 0x1462 <LCDSendCmd+0x288>
	else if (__tmp > 255)
    12a2:	fe 01       	movw	r30, r28
    12a4:	ef 58       	subi	r30, 0x8F	; 143
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	53 e4       	ldi	r21, 0x43	; 67
    12b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	0c f0       	brlt	.+2      	; 0x12c2 <LCDSendCmd+0xe8>
    12c0:	c0 c0       	rjmp	.+384    	; 0x1442 <LCDSendCmd+0x268>
	{
		_delay_ms(__us / 1000.0);
    12c2:	fe 01       	movw	r30, r28
    12c4:	eb 58       	subi	r30, 0x8B	; 139
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4a e7       	ldi	r20, 0x7A	; 122
    12d6:	54 e4       	ldi	r21, 0x44	; 68
    12d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	fe 01       	movw	r30, r28
    12e2:	e4 59       	subi	r30, 0x94	; 148
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	a2 83       	std	Z+2, r26	; 0x02
    12ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	8e 01       	movw	r16, r28
    12f0:	08 59       	subi	r16, 0x98	; 152
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	fe 01       	movw	r30, r28
    12f6:	e4 59       	subi	r30, 0x94	; 148
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a ef       	ldi	r20, 0xFA	; 250
    1308:	54 e4       	ldi	r21, 0x44	; 68
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	f8 01       	movw	r30, r16
    1314:	80 83       	st	Z, r24
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	a2 83       	std	Z+2, r26	; 0x02
    131a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    131c:	fe 01       	movw	r30, r28
    131e:	e8 59       	subi	r30, 0x98	; 152
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	44 f4       	brge	.+16     	; 0x134a <LCDSendCmd+0x170>
		__ticks = 1;
    133a:	fe 01       	movw	r30, r28
    133c:	ea 59       	subi	r30, 0x9A	; 154
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	64 c0       	rjmp	.+200    	; 0x1412 <LCDSendCmd+0x238>
	else if (__tmp > 65535)
    134a:	fe 01       	movw	r30, r28
    134c:	e8 59       	subi	r30, 0x98	; 152
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	3f ef       	ldi	r19, 0xFF	; 255
    135c:	4f e7       	ldi	r20, 0x7F	; 127
    135e:	57 e4       	ldi	r21, 0x47	; 71
    1360:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1364:	18 16       	cp	r1, r24
    1366:	0c f0       	brlt	.+2      	; 0x136a <LCDSendCmd+0x190>
    1368:	43 c0       	rjmp	.+134    	; 0x13f0 <LCDSendCmd+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	fe 01       	movw	r30, r28
    136c:	e4 59       	subi	r30, 0x94	; 148
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8e 01       	movw	r16, r28
    138a:	0a 59       	subi	r16, 0x9A	; 154
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	f8 01       	movw	r30, r16
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
    13a0:	1f c0       	rjmp	.+62     	; 0x13e0 <LCDSendCmd+0x206>
    13a2:	fe 01       	movw	r30, r28
    13a4:	ec 59       	subi	r30, 0x9C	; 156
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	88 ec       	ldi	r24, 0xC8	; 200
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
    13b0:	fe 01       	movw	r30, r28
    13b2:	ec 59       	subi	r30, 0x9C	; 156
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	80 81       	ld	r24, Z
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <LCDSendCmd+0x1e0>
    13be:	fe 01       	movw	r30, r28
    13c0:	ec 59       	subi	r30, 0x9C	; 156
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	de 01       	movw	r26, r28
    13ca:	aa 59       	subi	r26, 0x9A	; 154
    13cc:	bf 4f       	sbci	r27, 0xFF	; 255
    13ce:	fe 01       	movw	r30, r28
    13d0:	ea 59       	subi	r30, 0x9A	; 154
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	11 96       	adiw	r26, 0x01	; 1
    13dc:	9c 93       	st	X, r25
    13de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	fe 01       	movw	r30, r28
    13e2:	ea 59       	subi	r30, 0x9A	; 154
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	d1 f6       	brne	.-76     	; 0x13a2 <LCDSendCmd+0x1c8>
    13ee:	4b c0       	rjmp	.+150    	; 0x1486 <LCDSendCmd+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	8e 01       	movw	r16, r28
    13f2:	0a 59       	subi	r16, 0x9A	; 154
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	fe 01       	movw	r30, r28
    13f8:	e8 59       	subi	r30, 0x98	; 152
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	f8 01       	movw	r30, r16
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
    1412:	de 01       	movw	r26, r28
    1414:	ae 59       	subi	r26, 0x9E	; 158
    1416:	bf 4f       	sbci	r27, 0xFF	; 255
    1418:	fe 01       	movw	r30, r28
    141a:	ea 59       	subi	r30, 0x9A	; 154
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
    1428:	fe 01       	movw	r30, r28
    142a:	ee 59       	subi	r30, 0x9E	; 158
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <LCDSendCmd+0x258>
    1436:	fe 01       	movw	r30, r28
    1438:	ee 59       	subi	r30, 0x9E	; 158
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	22 c0       	rjmp	.+68     	; 0x1486 <LCDSendCmd+0x2ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1442:	8e 01       	movw	r16, r28
    1444:	00 59       	subi	r16, 0x90	; 144
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	fe 01       	movw	r30, r28
    144a:	ef 58       	subi	r30, 0x8F	; 143
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	f8 01       	movw	r30, r16
    1460:	80 83       	st	Z, r24
    1462:	de 01       	movw	r26, r28
    1464:	af 59       	subi	r26, 0x9F	; 159
    1466:	bf 4f       	sbci	r27, 0xFF	; 255
    1468:	fe 01       	movw	r30, r28
    146a:	e0 59       	subi	r30, 0x90	; 144
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1472:	fe 01       	movw	r30, r28
    1474:	ef 59       	subi	r30, 0x9F	; 159
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	8a 95       	dec	r24
    147c:	f1 f7       	brne	.-4      	; 0x147a <LCDSendCmd+0x2a0>
    147e:	fe 01       	movw	r30, r28
    1480:	ef 59       	subi	r30, 0x9F	; 159
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 83       	st	Z, r24
	_delay_us(0.5);
	LCD_CPORT&=~(1<<EN);
    1486:	ab e3       	ldi	r26, 0x3B	; 59
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	eb e3       	ldi	r30, 0x3B	; 59
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	87 7f       	andi	r24, 0xF7	; 247
    1492:	8c 93       	st	X, r24
    1494:	fe 01       	movw	r30, r28
    1496:	e3 5a       	subi	r30, 0xA3	; 163
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	ac e8       	ldi	r26, 0x8C	; 140
    14a0:	b2 e4       	ldi	r27, 0x42	; 66
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
    14a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14aa:	8e 01       	movw	r16, r28
    14ac:	07 5a       	subi	r16, 0xA7	; 167
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	e3 5a       	subi	r30, 0xA3	; 163
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	2b ea       	ldi	r18, 0xAB	; 171
    14c0:	3a ea       	ldi	r19, 0xAA	; 170
    14c2:	4a e2       	ldi	r20, 0x2A	; 42
    14c4:	50 e4       	ldi	r21, 0x40	; 64
    14c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d8:	fe 01       	movw	r30, r28
    14da:	e7 5a       	subi	r30, 0xA7	; 167
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e8       	ldi	r20, 0x80	; 128
    14ec:	5f e3       	ldi	r21, 0x3F	; 63
    14ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14f2:	88 23       	and	r24, r24
    14f4:	34 f4       	brge	.+12     	; 0x1502 <LCDSendCmd+0x328>
		__ticks = 1;
    14f6:	fe 01       	movw	r30, r28
    14f8:	e8 5a       	subi	r30, 0xA8	; 168
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	80 83       	st	Z, r24
    1500:	e0 c0       	rjmp	.+448    	; 0x16c2 <LCDSendCmd+0x4e8>
	else if (__tmp > 255)
    1502:	fe 01       	movw	r30, r28
    1504:	e7 5a       	subi	r30, 0xA7	; 167
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	53 e4       	ldi	r21, 0x43	; 67
    1518:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	0c f0       	brlt	.+2      	; 0x1522 <LCDSendCmd+0x348>
    1520:	c0 c0       	rjmp	.+384    	; 0x16a2 <LCDSendCmd+0x4c8>
	{
		_delay_ms(__us / 1000.0);
    1522:	fe 01       	movw	r30, r28
    1524:	e3 5a       	subi	r30, 0xA3	; 163
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a e7       	ldi	r20, 0x7A	; 122
    1536:	54 e4       	ldi	r21, 0x44	; 68
    1538:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	fe 01       	movw	r30, r28
    1542:	ec 5a       	subi	r30, 0xAC	; 172
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	80 83       	st	Z, r24
    1548:	91 83       	std	Z+1, r25	; 0x01
    154a:	a2 83       	std	Z+2, r26	; 0x02
    154c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154e:	8e 01       	movw	r16, r28
    1550:	00 5b       	subi	r16, 0xB0	; 176
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	fe 01       	movw	r30, r28
    1556:	ec 5a       	subi	r30, 0xAC	; 172
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	f8 01       	movw	r30, r16
    1574:	80 83       	st	Z, r24
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	a2 83       	std	Z+2, r26	; 0x02
    157a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    157c:	fe 01       	movw	r30, r28
    157e:	e0 5b       	subi	r30, 0xB0	; 176
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	44 f4       	brge	.+16     	; 0x15aa <LCDSendCmd+0x3d0>
		__ticks = 1;
    159a:	fe 01       	movw	r30, r28
    159c:	e2 5b       	subi	r30, 0xB2	; 178
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
    15a8:	64 c0       	rjmp	.+200    	; 0x1672 <LCDSendCmd+0x498>
	else if (__tmp > 65535)
    15aa:	fe 01       	movw	r30, r28
    15ac:	e0 5b       	subi	r30, 0xB0	; 176
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	0c f0       	brlt	.+2      	; 0x15ca <LCDSendCmd+0x3f0>
    15c8:	43 c0       	rjmp	.+134    	; 0x1650 <LCDSendCmd+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ca:	fe 01       	movw	r30, r28
    15cc:	ec 5a       	subi	r30, 0xAC	; 172
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	60 81       	ld	r22, Z
    15d2:	71 81       	ldd	r23, Z+1	; 0x01
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8e 01       	movw	r16, r28
    15ea:	02 5b       	subi	r16, 0xB2	; 178
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	f8 01       	movw	r30, r16
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
    1600:	1f c0       	rjmp	.+62     	; 0x1640 <LCDSendCmd+0x466>
    1602:	fe 01       	movw	r30, r28
    1604:	e4 5b       	subi	r30, 0xB4	; 180
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	88 ec       	ldi	r24, 0xC8	; 200
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1610:	fe 01       	movw	r30, r28
    1612:	e4 5b       	subi	r30, 0xB4	; 180
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCDSendCmd+0x440>
    161e:	fe 01       	movw	r30, r28
    1620:	e4 5b       	subi	r30, 0xB4	; 180
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1628:	de 01       	movw	r26, r28
    162a:	a2 5b       	subi	r26, 0xB2	; 178
    162c:	bf 4f       	sbci	r27, 0xFF	; 255
    162e:	fe 01       	movw	r30, r28
    1630:	e2 5b       	subi	r30, 0xB2	; 178
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	11 96       	adiw	r26, 0x01	; 1
    163c:	9c 93       	st	X, r25
    163e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	fe 01       	movw	r30, r28
    1642:	e2 5b       	subi	r30, 0xB2	; 178
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	d1 f6       	brne	.-76     	; 0x1602 <LCDSendCmd+0x428>
    164e:	4b c0       	rjmp	.+150    	; 0x16e6 <LCDSendCmd+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	8e 01       	movw	r16, r28
    1652:	02 5b       	subi	r16, 0xB2	; 178
    1654:	1f 4f       	sbci	r17, 0xFF	; 255
    1656:	fe 01       	movw	r30, r28
    1658:	e0 5b       	subi	r30, 0xB0	; 176
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	de 01       	movw	r26, r28
    1674:	a6 5b       	subi	r26, 0xB6	; 182
    1676:	bf 4f       	sbci	r27, 0xFF	; 255
    1678:	fe 01       	movw	r30, r28
    167a:	e2 5b       	subi	r30, 0xB2	; 178
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	11 96       	adiw	r26, 0x01	; 1
    1684:	9c 93       	st	X, r25
    1686:	8e 93       	st	-X, r24
    1688:	fe 01       	movw	r30, r28
    168a:	e6 5b       	subi	r30, 0xB6	; 182
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCDSendCmd+0x4b8>
    1696:	fe 01       	movw	r30, r28
    1698:	e6 5b       	subi	r30, 0xB6	; 182
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
    16a0:	22 c0       	rjmp	.+68     	; 0x16e6 <LCDSendCmd+0x50c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16a2:	8e 01       	movw	r16, r28
    16a4:	08 5a       	subi	r16, 0xA8	; 168
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	fe 01       	movw	r30, r28
    16aa:	e7 5a       	subi	r30, 0xA7	; 167
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	f8 01       	movw	r30, r16
    16c0:	80 83       	st	Z, r24
    16c2:	de 01       	movw	r26, r28
    16c4:	a7 5b       	subi	r26, 0xB7	; 183
    16c6:	bf 4f       	sbci	r27, 0xFF	; 255
    16c8:	fe 01       	movw	r30, r28
    16ca:	e8 5a       	subi	r30, 0xA8	; 168
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16d2:	fe 01       	movw	r30, r28
    16d4:	e7 5b       	subi	r30, 0xB7	; 183
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	8a 95       	dec	r24
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCDSendCmd+0x500>
    16de:	fe 01       	movw	r30, r28
    16e0:	e7 5b       	subi	r30, 0xB7	; 183
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 83       	st	Z, r24
	_delay_us(70);
	LCD_DPORT=( (cmd<<4) & (0xf0) )|((LCD_DPORT&0x0f));
    16e6:	ab e3       	ldi	r26, 0x3B	; 59
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	fe 01       	movw	r30, r28
    16ec:	e7 58       	subi	r30, 0x87	; 135
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	82 95       	swap	r24
    16f8:	92 95       	swap	r25
    16fa:	90 7f       	andi	r25, 0xF0	; 240
    16fc:	98 27       	eor	r25, r24
    16fe:	80 7f       	andi	r24, 0xF0	; 240
    1700:	98 27       	eor	r25, r24
    1702:	98 2f       	mov	r25, r24
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 70       	andi	r24, 0x0F	; 15
    170c:	89 2b       	or	r24, r25
    170e:	8c 93       	st	X, r24
	#else
	//8 bit mode
	LCD_DPORT=cmd;
	#endif

	LCD_CPORT|=1<<EN;
    1710:	ab e3       	ldi	r26, 0x3B	; 59
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	eb e3       	ldi	r30, 0x3B	; 59
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 60       	ori	r24, 0x08	; 8
    171c:	8c 93       	st	X, r24
    171e:	fe 01       	movw	r30, r28
    1720:	eb 5b       	subi	r30, 0xBB	; 187
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	8a e9       	ldi	r24, 0x9A	; 154
    1726:	99 e9       	ldi	r25, 0x99	; 153
    1728:	a9 e9       	ldi	r26, 0x99	; 153
    172a:	be e3       	ldi	r27, 0x3E	; 62
    172c:	80 83       	st	Z, r24
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	a2 83       	std	Z+2, r26	; 0x02
    1732:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1734:	8e 01       	movw	r16, r28
    1736:	0f 5b       	subi	r16, 0xBF	; 191
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	fe 01       	movw	r30, r28
    173c:	eb 5b       	subi	r30, 0xBB	; 187
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	2b ea       	ldi	r18, 0xAB	; 171
    174a:	3a ea       	ldi	r19, 0xAA	; 170
    174c:	4a e2       	ldi	r20, 0x2A	; 42
    174e:	50 e4       	ldi	r21, 0x40	; 64
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	80 83       	st	Z, r24
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	a2 83       	std	Z+2, r26	; 0x02
    1760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1762:	fe 01       	movw	r30, r28
    1764:	ef 5b       	subi	r30, 0xBF	; 191
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177c:	88 23       	and	r24, r24
    177e:	34 f4       	brge	.+12     	; 0x178c <LCDSendCmd+0x5b2>
		__ticks = 1;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	fe 01       	movw	r30, r28
    1784:	e0 5c       	subi	r30, 0xC0	; 192
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 83       	st	Z, r24
    178a:	9d c0       	rjmp	.+314    	; 0x18c6 <LCDSendCmd+0x6ec>
	else if (__tmp > 255)
    178c:	fe 01       	movw	r30, r28
    178e:	ef 5b       	subi	r30, 0xBF	; 191
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	53 e4       	ldi	r21, 0x43	; 67
    17a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	0c f0       	brlt	.+2      	; 0x17ac <LCDSendCmd+0x5d2>
    17aa:	7e c0       	rjmp	.+252    	; 0x18a8 <LCDSendCmd+0x6ce>
	{
		_delay_ms(__us / 1000.0);
    17ac:	fe 01       	movw	r30, r28
    17ae:	eb 5b       	subi	r30, 0xBB	; 187
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a e7       	ldi	r20, 0x7A	; 122
    17c0:	54 e4       	ldi	r21, 0x44	; 68
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8c af       	std	Y+60, r24	; 0x3c
    17cc:	9d af       	std	Y+61, r25	; 0x3d
    17ce:	ae af       	std	Y+62, r26	; 0x3e
    17d0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    17d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    17d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    17d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a ef       	ldi	r20, 0xFA	; 250
    17e0:	54 e4       	ldi	r21, 0x44	; 68
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	88 af       	std	Y+56, r24	; 0x38
    17ec:	99 af       	std	Y+57, r25	; 0x39
    17ee:	aa af       	std	Y+58, r26	; 0x3a
    17f0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    17f2:	68 ad       	ldd	r22, Y+56	; 0x38
    17f4:	79 ad       	ldd	r23, Y+57	; 0x39
    17f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    17f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	2c f4       	brge	.+10     	; 0x1814 <LCDSendCmd+0x63a>
		__ticks = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9f ab       	std	Y+55, r25	; 0x37
    1810:	8e ab       	std	Y+54, r24	; 0x36
    1812:	3f c0       	rjmp	.+126    	; 0x1892 <LCDSendCmd+0x6b8>
	else if (__tmp > 65535)
    1814:	68 ad       	ldd	r22, Y+56	; 0x38
    1816:	79 ad       	ldd	r23, Y+57	; 0x39
    1818:	8a ad       	ldd	r24, Y+58	; 0x3a
    181a:	9b ad       	ldd	r25, Y+59	; 0x3b
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1828:	18 16       	cp	r1, r24
    182a:	4c f5       	brge	.+82     	; 0x187e <LCDSendCmd+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182c:	6c ad       	ldd	r22, Y+60	; 0x3c
    182e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1830:	8e ad       	ldd	r24, Y+62	; 0x3e
    1832:	9f ad       	ldd	r25, Y+63	; 0x3f
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9f ab       	std	Y+55, r25	; 0x37
    1852:	8e ab       	std	Y+54, r24	; 0x36
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <LCDSendCmd+0x69a>
    1856:	88 ec       	ldi	r24, 0xC8	; 200
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9d ab       	std	Y+53, r25	; 0x35
    185c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    185e:	8c a9       	ldd	r24, Y+52	; 0x34
    1860:	9d a9       	ldd	r25, Y+53	; 0x35
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCDSendCmd+0x688>
    1866:	9d ab       	std	Y+53, r25	; 0x35
    1868:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186a:	8e a9       	ldd	r24, Y+54	; 0x36
    186c:	9f a9       	ldd	r25, Y+55	; 0x37
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	9f ab       	std	Y+55, r25	; 0x37
    1872:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	8e a9       	ldd	r24, Y+54	; 0x36
    1876:	9f a9       	ldd	r25, Y+55	; 0x37
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	69 f7       	brne	.-38     	; 0x1856 <LCDSendCmd+0x67c>
    187c:	2d c0       	rjmp	.+90     	; 0x18d8 <LCDSendCmd+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187e:	68 ad       	ldd	r22, Y+56	; 0x38
    1880:	79 ad       	ldd	r23, Y+57	; 0x39
    1882:	8a ad       	ldd	r24, Y+58	; 0x3a
    1884:	9b ad       	ldd	r25, Y+59	; 0x3b
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9f ab       	std	Y+55, r25	; 0x37
    1890:	8e ab       	std	Y+54, r24	; 0x36
    1892:	8e a9       	ldd	r24, Y+54	; 0x36
    1894:	9f a9       	ldd	r25, Y+55	; 0x37
    1896:	9b ab       	std	Y+51, r25	; 0x33
    1898:	8a ab       	std	Y+50, r24	; 0x32
    189a:	8a a9       	ldd	r24, Y+50	; 0x32
    189c:	9b a9       	ldd	r25, Y+51	; 0x33
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCDSendCmd+0x6c4>
    18a2:	9b ab       	std	Y+51, r25	; 0x33
    18a4:	8a ab       	std	Y+50, r24	; 0x32
    18a6:	18 c0       	rjmp	.+48     	; 0x18d8 <LCDSendCmd+0x6fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18a8:	fe 01       	movw	r30, r28
    18aa:	ef 5b       	subi	r30, 0xBF	; 191
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	60 81       	ld	r22, Z
    18b0:	71 81       	ldd	r23, Z+1	; 0x01
    18b2:	82 81       	ldd	r24, Z+2	; 0x02
    18b4:	93 81       	ldd	r25, Z+3	; 0x03
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	fe 01       	movw	r30, r28
    18c0:	e0 5c       	subi	r30, 0xC0	; 192
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 83       	st	Z, r24
    18c6:	fe 01       	movw	r30, r28
    18c8:	e0 5c       	subi	r30, 0xC0	; 192
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 81       	ld	r24, Z
    18ce:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18d0:	89 a9       	ldd	r24, Y+49	; 0x31
    18d2:	8a 95       	dec	r24
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCDSendCmd+0x6f8>
    18d6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(0.3);
	LCD_CPORT&=~(1<<EN);
    18d8:	ab e3       	ldi	r26, 0x3B	; 59
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	eb e3       	ldi	r30, 0x3B	; 59
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	87 7f       	andi	r24, 0xF7	; 247
    18e4:	8c 93       	st	X, r24


	switch(cmd)
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 58       	subi	r30, 0x87	; 135
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	91 05       	cpc	r25, r1
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <LCDSendCmd+0x722>
    18fa:	bf c0       	rjmp	.+382    	; 0x1a7a <LCDSendCmd+0x8a0>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	aa ef       	ldi	r26, 0xFA	; 250
    1902:	b4 e4       	ldi	r27, 0x44	; 68
    1904:	8d a7       	std	Y+45, r24	; 0x2d
    1906:	9e a7       	std	Y+46, r25	; 0x2e
    1908:	af a7       	std	Y+47, r26	; 0x2f
    190a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    190c:	6d a5       	ldd	r22, Y+45	; 0x2d
    190e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1910:	8f a5       	ldd	r24, Y+47	; 0x2f
    1912:	98 a9       	ldd	r25, Y+48	; 0x30
    1914:	2b ea       	ldi	r18, 0xAB	; 171
    1916:	3a ea       	ldi	r19, 0xAA	; 170
    1918:	4a e2       	ldi	r20, 0x2A	; 42
    191a:	50 e4       	ldi	r21, 0x40	; 64
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	89 a7       	std	Y+41, r24	; 0x29
    1926:	9a a7       	std	Y+42, r25	; 0x2a
    1928:	ab a7       	std	Y+43, r26	; 0x2b
    192a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    192c:	69 a5       	ldd	r22, Y+41	; 0x29
    192e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1930:	8b a5       	ldd	r24, Y+43	; 0x2b
    1932:	9c a5       	ldd	r25, Y+44	; 0x2c
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	1c f4       	brge	.+6      	; 0x194a <LCDSendCmd+0x770>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	88 a7       	std	Y+40, r24	; 0x28
    1948:	91 c0       	rjmp	.+290    	; 0x1a6c <LCDSendCmd+0x892>
	else if (__tmp > 255)
    194a:	69 a5       	ldd	r22, Y+41	; 0x29
    194c:	7a a5       	ldd	r23, Y+42	; 0x2a
    194e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1950:	9c a5       	ldd	r25, Y+44	; 0x2c
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	53 e4       	ldi	r21, 0x43	; 67
    195a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	0c f0       	brlt	.+2      	; 0x1964 <LCDSendCmd+0x78a>
    1962:	7b c0       	rjmp	.+246    	; 0x1a5a <LCDSendCmd+0x880>
	{
		_delay_ms(__us / 1000.0);
    1964:	6d a5       	ldd	r22, Y+45	; 0x2d
    1966:	7e a5       	ldd	r23, Y+46	; 0x2e
    1968:	8f a5       	ldd	r24, Y+47	; 0x2f
    196a:	98 a9       	ldd	r25, Y+48	; 0x30
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a e7       	ldi	r20, 0x7A	; 122
    1972:	54 e4       	ldi	r21, 0x44	; 68
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8c a3       	std	Y+36, r24	; 0x24
    197e:	9d a3       	std	Y+37, r25	; 0x25
    1980:	ae a3       	std	Y+38, r26	; 0x26
    1982:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	6c a1       	ldd	r22, Y+36	; 0x24
    1986:	7d a1       	ldd	r23, Y+37	; 0x25
    1988:	8e a1       	ldd	r24, Y+38	; 0x26
    198a:	9f a1       	ldd	r25, Y+39	; 0x27
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	88 a3       	std	Y+32, r24	; 0x20
    199e:	99 a3       	std	Y+33, r25	; 0x21
    19a0:	aa a3       	std	Y+34, r26	; 0x22
    19a2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    19a4:	68 a1       	ldd	r22, Y+32	; 0x20
    19a6:	79 a1       	ldd	r23, Y+33	; 0x21
    19a8:	8a a1       	ldd	r24, Y+34	; 0x22
    19aa:	9b a1       	ldd	r25, Y+35	; 0x23
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <LCDSendCmd+0x7ec>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9f 8f       	std	Y+31, r25	; 0x1f
    19c2:	8e 8f       	std	Y+30, r24	; 0x1e
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <LCDSendCmd+0x86a>
	else if (__tmp > 65535)
    19c6:	68 a1       	ldd	r22, Y+32	; 0x20
    19c8:	79 a1       	ldd	r23, Y+33	; 0x21
    19ca:	8a a1       	ldd	r24, Y+34	; 0x22
    19cc:	9b a1       	ldd	r25, Y+35	; 0x23
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <LCDSendCmd+0x856>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	6c a1       	ldd	r22, Y+36	; 0x24
    19e0:	7d a1       	ldd	r23, Y+37	; 0x25
    19e2:	8e a1       	ldd	r24, Y+38	; 0x26
    19e4:	9f a1       	ldd	r25, Y+39	; 0x27
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9f 8f       	std	Y+31, r25	; 0x1f
    1a04:	8e 8f       	std	Y+30, r24	; 0x1e
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <LCDSendCmd+0x84c>
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9d 8f       	std	Y+29, r25	; 0x1d
    1a0e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a10:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a12:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <LCDSendCmd+0x83a>
    1a18:	9d 8f       	std	Y+29, r25	; 0x1d
    1a1a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9f 8f       	std	Y+31, r25	; 0x1f
    1a24:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <LCDSendCmd+0x82e>
    1a2e:	e3 c0       	rjmp	.+454    	; 0x1bf6 <LCDSendCmd+0xa1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	68 a1       	ldd	r22, Y+32	; 0x20
    1a32:	79 a1       	ldd	r23, Y+33	; 0x21
    1a34:	8a a1       	ldd	r24, Y+34	; 0x22
    1a36:	9b a1       	ldd	r25, Y+35	; 0x23
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9f 8f       	std	Y+31, r25	; 0x1f
    1a42:	8e 8f       	std	Y+30, r24	; 0x1e
    1a44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a48:	9b 8f       	std	Y+27, r25	; 0x1b
    1a4a:	8a 8f       	std	Y+26, r24	; 0x1a
    1a4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a4e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCDSendCmd+0x876>
    1a54:	9b 8f       	std	Y+27, r25	; 0x1b
    1a56:	8a 8f       	std	Y+26, r24	; 0x1a
    1a58:	ce c0       	rjmp	.+412    	; 0x1bf6 <LCDSendCmd+0xa1c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a5a:	69 a5       	ldd	r22, Y+41	; 0x29
    1a5c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	88 a7       	std	Y+40, r24	; 0x28
    1a6c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a6e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a70:	89 8d       	ldd	r24, Y+25	; 0x19
    1a72:	8a 95       	dec	r24
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCDSendCmd+0x898>
    1a76:	89 8f       	std	Y+25, r24	; 0x19
    1a78:	be c0       	rjmp	.+380    	; 0x1bf6 <LCDSendCmd+0xa1c>
	{
		case 0x01:
		case 0x02:
		_delay_us(2000);
		break;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a8 e4       	ldi	r26, 0x48	; 72
    1a80:	b3 e4       	ldi	r27, 0x43	; 67
    1a82:	8d 8b       	std	Y+21, r24	; 0x15
    1a84:	9e 8b       	std	Y+22, r25	; 0x16
    1a86:	af 8b       	std	Y+23, r26	; 0x17
    1a88:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a90:	98 8d       	ldd	r25, Y+24	; 0x18
    1a92:	2b ea       	ldi	r18, 0xAB	; 171
    1a94:	3a ea       	ldi	r19, 0xAA	; 170
    1a96:	4a e2       	ldi	r20, 0x2A	; 42
    1a98:	50 e4       	ldi	r21, 0x40	; 64
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	89 8b       	std	Y+17, r24	; 0x11
    1aa4:	9a 8b       	std	Y+18, r25	; 0x12
    1aa6:	ab 8b       	std	Y+19, r26	; 0x13
    1aa8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1aaa:	69 89       	ldd	r22, Y+17	; 0x11
    1aac:	7a 89       	ldd	r23, Y+18	; 0x12
    1aae:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	1c f4       	brge	.+6      	; 0x1ac8 <LCDSendCmd+0x8ee>
		__ticks = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	88 8b       	std	Y+16, r24	; 0x10
    1ac6:	91 c0       	rjmp	.+290    	; 0x1bea <LCDSendCmd+0xa10>
	else if (__tmp > 255)
    1ac8:	69 89       	ldd	r22, Y+17	; 0x11
    1aca:	7a 89       	ldd	r23, Y+18	; 0x12
    1acc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ace:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	0c f0       	brlt	.+2      	; 0x1ae2 <LCDSendCmd+0x908>
    1ae0:	7b c0       	rjmp	.+246    	; 0x1bd8 <LCDSendCmd+0x9fe>
	{
		_delay_ms(__us / 1000.0);
    1ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a e7       	ldi	r20, 0x7A	; 122
    1af0:	54 e4       	ldi	r21, 0x44	; 68
    1af2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8c 87       	std	Y+12, r24	; 0x0c
    1afc:	9d 87       	std	Y+13, r25	; 0x0d
    1afe:	ae 87       	std	Y+14, r26	; 0x0e
    1b00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b02:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b04:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4a ef       	ldi	r20, 0xFA	; 250
    1b10:	54 e4       	ldi	r21, 0x44	; 68
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	88 87       	std	Y+8, r24	; 0x08
    1b1c:	99 87       	std	Y+9, r25	; 0x09
    1b1e:	aa 87       	std	Y+10, r26	; 0x0a
    1b20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b22:	68 85       	ldd	r22, Y+8	; 0x08
    1b24:	79 85       	ldd	r23, Y+9	; 0x09
    1b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e8       	ldi	r20, 0x80	; 128
    1b30:	5f e3       	ldi	r21, 0x3F	; 63
    1b32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b36:	88 23       	and	r24, r24
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <LCDSendCmd+0x96a>
		__ticks = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9f 83       	std	Y+7, r25	; 0x07
    1b40:	8e 83       	std	Y+6, r24	; 0x06
    1b42:	3f c0       	rjmp	.+126    	; 0x1bc2 <LCDSendCmd+0x9e8>
	else if (__tmp > 65535)
    1b44:	68 85       	ldd	r22, Y+8	; 0x08
    1b46:	79 85       	ldd	r23, Y+9	; 0x09
    1b48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	3f ef       	ldi	r19, 0xFF	; 255
    1b50:	4f e7       	ldi	r20, 0x7F	; 127
    1b52:	57 e4       	ldi	r21, 0x47	; 71
    1b54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	4c f5       	brge	.+82     	; 0x1bae <LCDSendCmd+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9f 83       	std	Y+7, r25	; 0x07
    1b82:	8e 83       	std	Y+6, r24	; 0x06
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <LCDSendCmd+0x9ca>
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9d 83       	std	Y+5, r25	; 0x05
    1b8c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCDSendCmd+0x9b8>
    1b96:	9d 83       	std	Y+5, r25	; 0x05
    1b98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	9f 83       	std	Y+7, r25	; 0x07
    1ba2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <LCDSendCmd+0x9ac>
    1bac:	24 c0       	rjmp	.+72     	; 0x1bf6 <LCDSendCmd+0xa1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	68 85       	ldd	r22, Y+8	; 0x08
    1bb0:	79 85       	ldd	r23, Y+9	; 0x09
    1bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9f 83       	std	Y+7, r25	; 0x07
    1bc0:	8e 83       	std	Y+6, r24	; 0x06
    1bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc6:	9b 83       	std	Y+3, r25	; 0x03
    1bc8:	8a 83       	std	Y+2, r24	; 0x02
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCDSendCmd+0x9f4>
    1bd2:	9b 83       	std	Y+3, r25	; 0x03
    1bd4:	8a 83       	std	Y+2, r24	; 0x02
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCDSendCmd+0xa1c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bd8:	69 89       	ldd	r22, Y+17	; 0x11
    1bda:	7a 89       	ldd	r23, Y+18	; 0x12
    1bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bde:	9c 89       	ldd	r25, Y+20	; 0x14
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	88 8b       	std	Y+16, r24	; 0x10
    1bea:	88 89       	ldd	r24, Y+16	; 0x10
    1bec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	8a 95       	dec	r24
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCDSendCmd+0xa16>
    1bf4:	89 83       	std	Y+1, r24	; 0x01
		default:
		_delay_us(200);
		break;
	}

}
    1bf6:	c7 58       	subi	r28, 0x87	; 135
    1bf8:	df 4f       	sbci	r29, 0xFF	; 255
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <LCDSendChar>:

void LCDSendChar(char data)
{
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	c1 56       	subi	r28, 0x61	; 97
    1c1c:	d0 40       	sbci	r29, 0x00	; 0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ef 59       	subi	r30, 0x9F	; 159
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	80 83       	st	Z, r24


	LCD_CPORT|=1<<RS;
    1c30:	ab e3       	ldi	r26, 0x3B	; 59
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	eb e3       	ldi	r30, 0x3B	; 59
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	84 60       	ori	r24, 0x04	; 4
    1c3c:	8c 93       	st	X, r24
	#ifdef  _4bitMode

	LCD_DPORT=(LCD_DPORT&0x0f)|(data&0xf0);
    1c3e:	ab e3       	ldi	r26, 0x3B	; 59
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	eb e3       	ldi	r30, 0x3B	; 59
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	98 2f       	mov	r25, r24
    1c4a:	9f 70       	andi	r25, 0x0F	; 15
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ef 59       	subi	r30, 0x9F	; 159
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	80 7f       	andi	r24, 0xF0	; 240
    1c56:	89 2b       	or	r24, r25
    1c58:	8c 93       	st	X, r24
	LCD_CPORT|=(1<<EN);
    1c5a:	ab e3       	ldi	r26, 0x3B	; 59
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	eb e3       	ldi	r30, 0x3B	; 59
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	88 60       	ori	r24, 0x08	; 8
    1c66:	8c 93       	st	X, r24
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e3 5a       	subi	r30, 0xA3	; 163
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	8a e9       	ldi	r24, 0x9A	; 154
    1c70:	99 e9       	ldi	r25, 0x99	; 153
    1c72:	a9 e9       	ldi	r26, 0x99	; 153
    1c74:	be e3       	ldi	r27, 0x3E	; 62
    1c76:	80 83       	st	Z, r24
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	a2 83       	std	Z+2, r26	; 0x02
    1c7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c7e:	8e 01       	movw	r16, r28
    1c80:	07 5a       	subi	r16, 0xA7	; 167
    1c82:	1f 4f       	sbci	r17, 0xFF	; 255
    1c84:	fe 01       	movw	r30, r28
    1c86:	e3 5a       	subi	r30, 0xA3	; 163
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	60 81       	ld	r22, Z
    1c8c:	71 81       	ldd	r23, Z+1	; 0x01
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	2b ea       	ldi	r18, 0xAB	; 171
    1c94:	3a ea       	ldi	r19, 0xAA	; 170
    1c96:	4a e2       	ldi	r20, 0x2A	; 42
    1c98:	50 e4       	ldi	r21, 0x40	; 64
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	80 83       	st	Z, r24
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	a2 83       	std	Z+2, r26	; 0x02
    1caa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cac:	fe 01       	movw	r30, r28
    1cae:	e7 5a       	subi	r30, 0xA7	; 167
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	34 f4       	brge	.+12     	; 0x1cd6 <LCDSendChar+0xc8>
		__ticks = 1;
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e8 5a       	subi	r30, 0xA8	; 168
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	80 83       	st	Z, r24
    1cd4:	e0 c0       	rjmp	.+448    	; 0x1e96 <LCDSendChar+0x288>
	else if (__tmp > 255)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e7 5a       	subi	r30, 0xA7	; 167
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	53 e4       	ldi	r21, 0x43	; 67
    1cec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	0c f0       	brlt	.+2      	; 0x1cf6 <LCDSendChar+0xe8>
    1cf4:	c0 c0       	rjmp	.+384    	; 0x1e76 <LCDSendChar+0x268>
	{
		_delay_ms(__us / 1000.0);
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e3 5a       	subi	r30, 0xA3	; 163
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	fe 01       	movw	r30, r28
    1d16:	ec 5a       	subi	r30, 0xAC	; 172
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	8e 01       	movw	r16, r28
    1d24:	00 5b       	subi	r16, 0xB0	; 176
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ec 5a       	subi	r30, 0xAC	; 172
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a ef       	ldi	r20, 0xFA	; 250
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 83       	st	Z, r24
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d50:	fe 01       	movw	r30, r28
    1d52:	e0 5b       	subi	r30, 0xB0	; 176
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	44 f4       	brge	.+16     	; 0x1d7e <LCDSendChar+0x170>
		__ticks = 1;
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e2 5b       	subi	r30, 0xB2	; 178
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	64 c0       	rjmp	.+200    	; 0x1e46 <LCDSendChar+0x238>
	else if (__tmp > 65535)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e0 5b       	subi	r30, 0xB0	; 176
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	0c f0       	brlt	.+2      	; 0x1d9e <LCDSendChar+0x190>
    1d9c:	43 c0       	rjmp	.+134    	; 0x1e24 <LCDSendChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ec 5a       	subi	r30, 0xAC	; 172
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	02 5b       	subi	r16, 0xB2	; 178
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	f8 01       	movw	r30, r16
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
    1dd4:	1f c0       	rjmp	.+62     	; 0x1e14 <LCDSendChar+0x206>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e4 5b       	subi	r30, 0xB4	; 180
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	88 ec       	ldi	r24, 0xC8	; 200
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de4:	fe 01       	movw	r30, r28
    1de6:	e4 5b       	subi	r30, 0xB4	; 180
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCDSendChar+0x1e0>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e4 5b       	subi	r30, 0xB4	; 180
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	de 01       	movw	r26, r28
    1dfe:	a2 5b       	subi	r26, 0xB2	; 178
    1e00:	bf 4f       	sbci	r27, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	e2 5b       	subi	r30, 0xB2	; 178
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	9c 93       	st	X, r25
    1e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	fe 01       	movw	r30, r28
    1e16:	e2 5b       	subi	r30, 0xB2	; 178
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	d1 f6       	brne	.-76     	; 0x1dd6 <LCDSendChar+0x1c8>
    1e22:	4b c0       	rjmp	.+150    	; 0x1eba <LCDSendChar+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	8e 01       	movw	r16, r28
    1e26:	02 5b       	subi	r16, 0xB2	; 178
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e0 5b       	subi	r30, 0xB0	; 176
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	80 83       	st	Z, r24
    1e46:	de 01       	movw	r26, r28
    1e48:	a6 5b       	subi	r26, 0xB6	; 182
    1e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e2 5b       	subi	r30, 0xB2	; 178
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	11 96       	adiw	r26, 0x01	; 1
    1e58:	9c 93       	st	X, r25
    1e5a:	8e 93       	st	-X, r24
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e6 5b       	subi	r30, 0xB6	; 182
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCDSendChar+0x258>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e6 5b       	subi	r30, 0xB6	; 182
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	22 c0       	rjmp	.+68     	; 0x1eba <LCDSendChar+0x2ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e76:	8e 01       	movw	r16, r28
    1e78:	08 5a       	subi	r16, 0xA8	; 168
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e7 5a       	subi	r30, 0xA7	; 167
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	80 83       	st	Z, r24
    1e96:	de 01       	movw	r26, r28
    1e98:	a7 5b       	subi	r26, 0xB7	; 183
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e8 5a       	subi	r30, 0xA8	; 168
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e7 5b       	subi	r30, 0xB7	; 183
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 81       	ld	r24, Z
    1eae:	8a 95       	dec	r24
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCDSendChar+0x2a0>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e7 5b       	subi	r30, 0xB7	; 183
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 83       	st	Z, r24
	_delay_us(0.3);
	LCD_CPORT&=~(1<<EN);
    1eba:	ab e3       	ldi	r26, 0x3B	; 59
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	eb e3       	ldi	r30, 0x3B	; 59
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	87 7f       	andi	r24, 0xF7	; 247
    1ec6:	8c 93       	st	X, r24
    1ec8:	fe 01       	movw	r30, r28
    1eca:	eb 5b       	subi	r30, 0xBB	; 187
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a8 ec       	ldi	r26, 0xC8	; 200
    1ed4:	b2 e4       	ldi	r27, 0x42	; 66
    1ed6:	80 83       	st	Z, r24
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	a2 83       	std	Z+2, r26	; 0x02
    1edc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ede:	8e 01       	movw	r16, r28
    1ee0:	0f 5b       	subi	r16, 0xBF	; 191
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	eb 5b       	subi	r30, 0xBB	; 187
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	2b ea       	ldi	r18, 0xAB	; 171
    1ef4:	3a ea       	ldi	r19, 0xAA	; 170
    1ef6:	4a e2       	ldi	r20, 0x2A	; 42
    1ef8:	50 e4       	ldi	r21, 0x40	; 64
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	f8 01       	movw	r30, r16
    1f04:	80 83       	st	Z, r24
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	a2 83       	std	Z+2, r26	; 0x02
    1f0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ef 5b       	subi	r30, 0xBF	; 191
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	34 f4       	brge	.+12     	; 0x1f36 <LCDSendChar+0x328>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e0 5c       	subi	r30, 0xC0	; 192
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 83       	st	Z, r24
    1f34:	9d c0       	rjmp	.+314    	; 0x2070 <LCDSendChar+0x462>
	else if (__tmp > 255)
    1f36:	fe 01       	movw	r30, r28
    1f38:	ef 5b       	subi	r30, 0xBF	; 191
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	53 e4       	ldi	r21, 0x43	; 67
    1f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	0c f0       	brlt	.+2      	; 0x1f56 <LCDSendChar+0x348>
    1f54:	7e c0       	rjmp	.+252    	; 0x2052 <LCDSendChar+0x444>
	{
		_delay_ms(__us / 1000.0);
    1f56:	fe 01       	movw	r30, r28
    1f58:	eb 5b       	subi	r30, 0xBB	; 187
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8c af       	std	Y+60, r24	; 0x3c
    1f76:	9d af       	std	Y+61, r25	; 0x3d
    1f78:	ae af       	std	Y+62, r26	; 0x3e
    1f7a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f7e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f80:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f82:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a ef       	ldi	r20, 0xFA	; 250
    1f8a:	54 e4       	ldi	r21, 0x44	; 68
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	88 af       	std	Y+56, r24	; 0x38
    1f96:	99 af       	std	Y+57, r25	; 0x39
    1f98:	aa af       	std	Y+58, r26	; 0x3a
    1f9a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1f9c:	68 ad       	ldd	r22, Y+56	; 0x38
    1f9e:	79 ad       	ldd	r23, Y+57	; 0x39
    1fa0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fa2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <LCDSendChar+0x3b0>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9f ab       	std	Y+55, r25	; 0x37
    1fba:	8e ab       	std	Y+54, r24	; 0x36
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <LCDSendChar+0x42e>
	else if (__tmp > 65535)
    1fbe:	68 ad       	ldd	r22, Y+56	; 0x38
    1fc0:	79 ad       	ldd	r23, Y+57	; 0x39
    1fc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fc4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <LCDSendChar+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fd8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fda:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9f ab       	std	Y+55, r25	; 0x37
    1ffc:	8e ab       	std	Y+54, r24	; 0x36
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <LCDSendChar+0x410>
    2000:	88 ec       	ldi	r24, 0xC8	; 200
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9d ab       	std	Y+53, r25	; 0x35
    2006:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2008:	8c a9       	ldd	r24, Y+52	; 0x34
    200a:	9d a9       	ldd	r25, Y+53	; 0x35
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCDSendChar+0x3fe>
    2010:	9d ab       	std	Y+53, r25	; 0x35
    2012:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8e a9       	ldd	r24, Y+54	; 0x36
    2016:	9f a9       	ldd	r25, Y+55	; 0x37
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9f ab       	std	Y+55, r25	; 0x37
    201c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8e a9       	ldd	r24, Y+54	; 0x36
    2020:	9f a9       	ldd	r25, Y+55	; 0x37
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <LCDSendChar+0x3f2>
    2026:	2d c0       	rjmp	.+90     	; 0x2082 <LCDSendChar+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	68 ad       	ldd	r22, Y+56	; 0x38
    202a:	79 ad       	ldd	r23, Y+57	; 0x39
    202c:	8a ad       	ldd	r24, Y+58	; 0x3a
    202e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9f ab       	std	Y+55, r25	; 0x37
    203a:	8e ab       	std	Y+54, r24	; 0x36
    203c:	8e a9       	ldd	r24, Y+54	; 0x36
    203e:	9f a9       	ldd	r25, Y+55	; 0x37
    2040:	9b ab       	std	Y+51, r25	; 0x33
    2042:	8a ab       	std	Y+50, r24	; 0x32
    2044:	8a a9       	ldd	r24, Y+50	; 0x32
    2046:	9b a9       	ldd	r25, Y+51	; 0x33
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCDSendChar+0x43a>
    204c:	9b ab       	std	Y+51, r25	; 0x33
    204e:	8a ab       	std	Y+50, r24	; 0x32
    2050:	18 c0       	rjmp	.+48     	; 0x2082 <LCDSendChar+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2052:	fe 01       	movw	r30, r28
    2054:	ef 5b       	subi	r30, 0xBF	; 191
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	fe 01       	movw	r30, r28
    206a:	e0 5c       	subi	r30, 0xC0	; 192
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 83       	st	Z, r24
    2070:	fe 01       	movw	r30, r28
    2072:	e0 5c       	subi	r30, 0xC0	; 192
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    207a:	89 a9       	ldd	r24, Y+49	; 0x31
    207c:	8a 95       	dec	r24
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCDSendChar+0x46e>
    2080:	89 ab       	std	Y+49, r24	; 0x31
	
	_delay_us(100);
	LCD_DPORT=( (data<<4) & (0xf0) )|(LCD_DPORT&0x0f);
    2082:	ab e3       	ldi	r26, 0x3B	; 59
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	fe 01       	movw	r30, r28
    2088:	ef 59       	subi	r30, 0x9F	; 159
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	82 95       	swap	r24
    2094:	92 95       	swap	r25
    2096:	90 7f       	andi	r25, 0xF0	; 240
    2098:	98 27       	eor	r25, r24
    209a:	80 7f       	andi	r24, 0xF0	; 240
    209c:	98 27       	eor	r25, r24
    209e:	98 2f       	mov	r25, r24
    20a0:	eb e3       	ldi	r30, 0x3B	; 59
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	8f 70       	andi	r24, 0x0F	; 15
    20a8:	89 2b       	or	r24, r25
    20aa:	8c 93       	st	X, r24

	#else
	LCD_DPORT=data;
	#endif

	LCD_CPORT|=1<<EN;
    20ac:	ab e3       	ldi	r26, 0x3B	; 59
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	eb e3       	ldi	r30, 0x3B	; 59
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	88 60       	ori	r24, 0x08	; 8
    20b8:	8c 93       	st	X, r24
    20ba:	8a e9       	ldi	r24, 0x9A	; 154
    20bc:	99 e9       	ldi	r25, 0x99	; 153
    20be:	a9 e9       	ldi	r26, 0x99	; 153
    20c0:	be e3       	ldi	r27, 0x3E	; 62
    20c2:	8d a7       	std	Y+45, r24	; 0x2d
    20c4:	9e a7       	std	Y+46, r25	; 0x2e
    20c6:	af a7       	std	Y+47, r26	; 0x2f
    20c8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ca:	6d a5       	ldd	r22, Y+45	; 0x2d
    20cc:	7e a5       	ldd	r23, Y+46	; 0x2e
    20ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d0:	98 a9       	ldd	r25, Y+48	; 0x30
    20d2:	2b ea       	ldi	r18, 0xAB	; 171
    20d4:	3a ea       	ldi	r19, 0xAA	; 170
    20d6:	4a e2       	ldi	r20, 0x2A	; 42
    20d8:	50 e4       	ldi	r21, 0x40	; 64
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	89 a7       	std	Y+41, r24	; 0x29
    20e4:	9a a7       	std	Y+42, r25	; 0x2a
    20e6:	ab a7       	std	Y+43, r26	; 0x2b
    20e8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20ea:	69 a5       	ldd	r22, Y+41	; 0x29
    20ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    20ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	1c f4       	brge	.+6      	; 0x2108 <LCDSendChar+0x4fa>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	88 a7       	std	Y+40, r24	; 0x28
    2106:	91 c0       	rjmp	.+290    	; 0x222a <LCDSendChar+0x61c>
	else if (__tmp > 255)
    2108:	69 a5       	ldd	r22, Y+41	; 0x29
    210a:	7a a5       	ldd	r23, Y+42	; 0x2a
    210c:	8b a5       	ldd	r24, Y+43	; 0x2b
    210e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	53 e4       	ldi	r21, 0x43	; 67
    2118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	0c f0       	brlt	.+2      	; 0x2122 <LCDSendChar+0x514>
    2120:	7b c0       	rjmp	.+246    	; 0x2218 <LCDSendChar+0x60a>
	{
		_delay_ms(__us / 1000.0);
    2122:	6d a5       	ldd	r22, Y+45	; 0x2d
    2124:	7e a5       	ldd	r23, Y+46	; 0x2e
    2126:	8f a5       	ldd	r24, Y+47	; 0x2f
    2128:	98 a9       	ldd	r25, Y+48	; 0x30
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8c a3       	std	Y+36, r24	; 0x24
    213c:	9d a3       	std	Y+37, r25	; 0x25
    213e:	ae a3       	std	Y+38, r26	; 0x26
    2140:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	6c a1       	ldd	r22, Y+36	; 0x24
    2144:	7d a1       	ldd	r23, Y+37	; 0x25
    2146:	8e a1       	ldd	r24, Y+38	; 0x26
    2148:	9f a1       	ldd	r25, Y+39	; 0x27
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a ef       	ldi	r20, 0xFA	; 250
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	88 a3       	std	Y+32, r24	; 0x20
    215c:	99 a3       	std	Y+33, r25	; 0x21
    215e:	aa a3       	std	Y+34, r26	; 0x22
    2160:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2162:	68 a1       	ldd	r22, Y+32	; 0x20
    2164:	79 a1       	ldd	r23, Y+33	; 0x21
    2166:	8a a1       	ldd	r24, Y+34	; 0x22
    2168:	9b a1       	ldd	r25, Y+35	; 0x23
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <LCDSendChar+0x576>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9f 8f       	std	Y+31, r25	; 0x1f
    2180:	8e 8f       	std	Y+30, r24	; 0x1e
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <LCDSendChar+0x5f4>
	else if (__tmp > 65535)
    2184:	68 a1       	ldd	r22, Y+32	; 0x20
    2186:	79 a1       	ldd	r23, Y+33	; 0x21
    2188:	8a a1       	ldd	r24, Y+34	; 0x22
    218a:	9b a1       	ldd	r25, Y+35	; 0x23
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <LCDSendChar+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	6c a1       	ldd	r22, Y+36	; 0x24
    219e:	7d a1       	ldd	r23, Y+37	; 0x25
    21a0:	8e a1       	ldd	r24, Y+38	; 0x26
    21a2:	9f a1       	ldd	r25, Y+39	; 0x27
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9f 8f       	std	Y+31, r25	; 0x1f
    21c2:	8e 8f       	std	Y+30, r24	; 0x1e
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <LCDSendChar+0x5d6>
    21c6:	88 ec       	ldi	r24, 0xC8	; 200
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9d 8f       	std	Y+29, r25	; 0x1d
    21cc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCDSendChar+0x5c4>
    21d6:	9d 8f       	std	Y+29, r25	; 0x1d
    21d8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9f 8f       	std	Y+31, r25	; 0x1f
    21e2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <LCDSendChar+0x5b8>
    21ec:	24 c0       	rjmp	.+72     	; 0x2236 <LCDSendChar+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	68 a1       	ldd	r22, Y+32	; 0x20
    21f0:	79 a1       	ldd	r23, Y+33	; 0x21
    21f2:	8a a1       	ldd	r24, Y+34	; 0x22
    21f4:	9b a1       	ldd	r25, Y+35	; 0x23
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9f 8f       	std	Y+31, r25	; 0x1f
    2200:	8e 8f       	std	Y+30, r24	; 0x1e
    2202:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2204:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2206:	9b 8f       	std	Y+27, r25	; 0x1b
    2208:	8a 8f       	std	Y+26, r24	; 0x1a
    220a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    220c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCDSendChar+0x600>
    2212:	9b 8f       	std	Y+27, r25	; 0x1b
    2214:	8a 8f       	std	Y+26, r24	; 0x1a
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <LCDSendChar+0x628>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2218:	69 a5       	ldd	r22, Y+41	; 0x29
    221a:	7a a5       	ldd	r23, Y+42	; 0x2a
    221c:	8b a5       	ldd	r24, Y+43	; 0x2b
    221e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	88 a7       	std	Y+40, r24	; 0x28
    222a:	88 a5       	ldd	r24, Y+40	; 0x28
    222c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    222e:	89 8d       	ldd	r24, Y+25	; 0x19
    2230:	8a 95       	dec	r24
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCDSendChar+0x622>
    2234:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(0.3);
	LCD_CPORT&=~(1<<EN);
    2236:	ab e3       	ldi	r26, 0x3B	; 59
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	eb e3       	ldi	r30, 0x3B	; 59
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	87 7f       	andi	r24, 0xF7	; 247
    2242:	8c 93       	st	X, r24
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a8 ec       	ldi	r26, 0xC8	; 200
    224a:	b2 e4       	ldi	r27, 0x42	; 66
    224c:	8d 8b       	std	Y+21, r24	; 0x15
    224e:	9e 8b       	std	Y+22, r25	; 0x16
    2250:	af 8b       	std	Y+23, r26	; 0x17
    2252:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2254:	6d 89       	ldd	r22, Y+21	; 0x15
    2256:	7e 89       	ldd	r23, Y+22	; 0x16
    2258:	8f 89       	ldd	r24, Y+23	; 0x17
    225a:	98 8d       	ldd	r25, Y+24	; 0x18
    225c:	2b ea       	ldi	r18, 0xAB	; 171
    225e:	3a ea       	ldi	r19, 0xAA	; 170
    2260:	4a e2       	ldi	r20, 0x2A	; 42
    2262:	50 e4       	ldi	r21, 0x40	; 64
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	89 8b       	std	Y+17, r24	; 0x11
    226e:	9a 8b       	std	Y+18, r25	; 0x12
    2270:	ab 8b       	std	Y+19, r26	; 0x13
    2272:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2274:	69 89       	ldd	r22, Y+17	; 0x11
    2276:	7a 89       	ldd	r23, Y+18	; 0x12
    2278:	8b 89       	ldd	r24, Y+19	; 0x13
    227a:	9c 89       	ldd	r25, Y+20	; 0x14
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	1c f4       	brge	.+6      	; 0x2292 <LCDSendChar+0x684>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	88 8b       	std	Y+16, r24	; 0x10
    2290:	91 c0       	rjmp	.+290    	; 0x23b4 <LCDSendChar+0x7a6>
	else if (__tmp > 255)
    2292:	69 89       	ldd	r22, Y+17	; 0x11
    2294:	7a 89       	ldd	r23, Y+18	; 0x12
    2296:	8b 89       	ldd	r24, Y+19	; 0x13
    2298:	9c 89       	ldd	r25, Y+20	; 0x14
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	53 e4       	ldi	r21, 0x43	; 67
    22a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	0c f0       	brlt	.+2      	; 0x22ac <LCDSendChar+0x69e>
    22aa:	7b c0       	rjmp	.+246    	; 0x23a2 <LCDSendChar+0x794>
	{
		_delay_ms(__us / 1000.0);
    22ac:	6d 89       	ldd	r22, Y+21	; 0x15
    22ae:	7e 89       	ldd	r23, Y+22	; 0x16
    22b0:	8f 89       	ldd	r24, Y+23	; 0x17
    22b2:	98 8d       	ldd	r25, Y+24	; 0x18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a e7       	ldi	r20, 0x7A	; 122
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8c 87       	std	Y+12, r24	; 0x0c
    22c6:	9d 87       	std	Y+13, r25	; 0x0d
    22c8:	ae 87       	std	Y+14, r26	; 0x0e
    22ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    22d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a ef       	ldi	r20, 0xFA	; 250
    22da:	54 e4       	ldi	r21, 0x44	; 68
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	88 87       	std	Y+8, r24	; 0x08
    22e6:	99 87       	std	Y+9, r25	; 0x09
    22e8:	aa 87       	std	Y+10, r26	; 0x0a
    22ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22ec:	68 85       	ldd	r22, Y+8	; 0x08
    22ee:	79 85       	ldd	r23, Y+9	; 0x09
    22f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCDSendChar+0x700>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9f 83       	std	Y+7, r25	; 0x07
    230a:	8e 83       	std	Y+6, r24	; 0x06
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCDSendChar+0x77e>
	else if (__tmp > 65535)
    230e:	68 85       	ldd	r22, Y+8	; 0x08
    2310:	79 85       	ldd	r23, Y+9	; 0x09
    2312:	8a 85       	ldd	r24, Y+10	; 0x0a
    2314:	9b 85       	ldd	r25, Y+11	; 0x0b
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCDSendChar+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6c 85       	ldd	r22, Y+12	; 0x0c
    2328:	7d 85       	ldd	r23, Y+13	; 0x0d
    232a:	8e 85       	ldd	r24, Y+14	; 0x0e
    232c:	9f 85       	ldd	r25, Y+15	; 0x0f
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9f 83       	std	Y+7, r25	; 0x07
    234c:	8e 83       	std	Y+6, r24	; 0x06
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCDSendChar+0x760>
    2350:	88 ec       	ldi	r24, 0xC8	; 200
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9d 83       	std	Y+5, r25	; 0x05
    2356:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2358:	8c 81       	ldd	r24, Y+4	; 0x04
    235a:	9d 81       	ldd	r25, Y+5	; 0x05
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCDSendChar+0x74e>
    2360:	9d 83       	std	Y+5, r25	; 0x05
    2362:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8e 81       	ldd	r24, Y+6	; 0x06
    2366:	9f 81       	ldd	r25, Y+7	; 0x07
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9f 83       	std	Y+7, r25	; 0x07
    236c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8e 81       	ldd	r24, Y+6	; 0x06
    2370:	9f 81       	ldd	r25, Y+7	; 0x07
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCDSendChar+0x742>
    2376:	24 c0       	rjmp	.+72     	; 0x23c0 <LCDSendChar+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	68 85       	ldd	r22, Y+8	; 0x08
    237a:	79 85       	ldd	r23, Y+9	; 0x09
    237c:	8a 85       	ldd	r24, Y+10	; 0x0a
    237e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9f 83       	std	Y+7, r25	; 0x07
    238a:	8e 83       	std	Y+6, r24	; 0x06
    238c:	8e 81       	ldd	r24, Y+6	; 0x06
    238e:	9f 81       	ldd	r25, Y+7	; 0x07
    2390:	9b 83       	std	Y+3, r25	; 0x03
    2392:	8a 83       	std	Y+2, r24	; 0x02
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	9b 81       	ldd	r25, Y+3	; 0x03
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCDSendChar+0x78a>
    239c:	9b 83       	std	Y+3, r25	; 0x03
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <LCDSendChar+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23a2:	69 89       	ldd	r22, Y+17	; 0x11
    23a4:	7a 89       	ldd	r23, Y+18	; 0x12
    23a6:	8b 89       	ldd	r24, Y+19	; 0x13
    23a8:	9c 89       	ldd	r25, Y+20	; 0x14
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	88 8b       	std	Y+16, r24	; 0x10
    23b4:	88 89       	ldd	r24, Y+16	; 0x10
    23b6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	8a 95       	dec	r24
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <LCDSendChar+0x7ac>
    23be:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	
	
	proper_row();
    23c0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <proper_row>

	   
	
	
}
    23c4:	cf 59       	subi	r28, 0x9F	; 159
    23c6:	df 4f       	sbci	r29, 0xFF	; 255
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

000023dc <proper_row>:

static void proper_row()
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62

		++_column;
    23e4:	80 91 f4 00 	lds	r24, 0x00F4
    23e8:	8f 5f       	subi	r24, 0xFF	; 255
    23ea:	80 93 f4 00 	sts	0x00F4, r24
		if(_column>COLUMN_SIZE)
    23ee:	80 91 f4 00 	lds	r24, 0x00F4
    23f2:	81 31       	cpi	r24, 0x11	; 17
    23f4:	68 f0       	brcs	.+26     	; 0x2410 <proper_row+0x34>
		{
			_row++;
    23f6:	80 91 f3 00 	lds	r24, 0x00F3
    23fa:	8f 5f       	subi	r24, 0xFF	; 255
    23fc:	80 93 f3 00 	sts	0x00F3, r24
			_column=1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	80 93 f4 00 	sts	0x00F4, r24
			LCDRowColumn(_row , 1);
    2406:	80 91 f3 00 	lds	r24, 0x00F3
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
	    }
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCDRowColumn>:
void LCDRowColumn(uint8_t row,uint8_t column)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <LCDRowColumn+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <LCDRowColumn+0x8>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <LCDRowColumn+0xa>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	6e 83       	std	Y+6, r22	; 0x06
	_row=row;
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	80 93 f3 00 	sts	0x00F3, r24
	_column=column;
    242e:	8e 81       	ldd	r24, Y+6	; 0x06
    2430:	80 93 f4 00 	sts	0x00F4, r24
	uint8_t firstCharAdress[]={0x80,0xc0,0x94,0xD4};
    2434:	80 e8       	ldi	r24, 0x80	; 128
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	80 ec       	ldi	r24, 0xC0	; 192
    243a:	8a 83       	std	Y+2, r24	; 0x02
    243c:	84 e9       	ldi	r24, 0x94	; 148
    243e:	8b 83       	std	Y+3, r24	; 0x03
    2440:	84 ed       	ldi	r24, 0xD4	; 212
    2442:	8c 83       	std	Y+4, r24	; 0x04
	LCDSendCmd(firstCharAdress[_row-1]+_column-1);
    2444:	80 91 f3 00 	lds	r24, 0x00F3
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9c 01       	movw	r18, r24
    244e:	21 50       	subi	r18, 0x01	; 1
    2450:	30 40       	sbci	r19, 0x00	; 0
    2452:	ce 01       	movw	r24, r28
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	fc 01       	movw	r30, r24
    2458:	e2 0f       	add	r30, r18
    245a:	f3 1f       	adc	r31, r19
    245c:	90 81       	ld	r25, Z
    245e:	80 91 f4 00 	lds	r24, 0x00F4
    2462:	89 0f       	add	r24, r25
    2464:	81 50       	subi	r24, 0x01	; 1
    2466:	0e 94 ed 08 	call	0x11da	; 0x11da <LCDSendCmd>
}
    246a:	26 96       	adiw	r28, 0x06	; 6
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <LCDPrint>:
void LCDPrint(char str[])
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <LCDPrint+0x6>
    2482:	0f 92       	push	r0
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	9b 83       	std	Y+3, r25	; 0x03
    248a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
    248c:	19 82       	std	Y+1, r1	; 0x01
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCDPrint+0x32>
	
	while(str[i]!=0)
		LCDSendChar(str[i++]);
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	90 81       	ld	r25, Z
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	8f 5f       	subi	r24, 0xFF	; 255
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	89 2f       	mov	r24, r25
    24aa:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCDSendChar>
}
void LCDPrint(char str[])
{
	uint8_t i=0;
	
	while(str[i]!=0)
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	31 f7       	brne	.-52     	; 0x2490 <LCDPrint+0x14>
		LCDSendChar(str[i++]);
		
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <LCDClearScreen>:

void LCDClearScreen()
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
LCDSendCmd(0x01);
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	0e 94 ed 08 	call	0x11da	; 0x11da <LCDSendCmd>
_row=_column=1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	80 93 f4 00 	sts	0x00F4, r24
    24e4:	80 91 f4 00 	lds	r24, 0x00F4
    24e8:	80 93 f3 00 	sts	0x00F3, r24
LCDRowColumn(1,1);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>

}
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <main>:



//RX
int main()
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	61 97       	sbiw	r28, 0x11	; 17
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61

	//PORTD=1<<2;
	MCUCR=(1<<ISC01);
    250e:	e5 e5       	ldi	r30, 0x55	; 85
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	82 e0       	ldi	r24, 0x02	; 2
    2514:	80 83       	st	Z, r24
	GICR=1<<INT0;
    2516:	eb e5       	ldi	r30, 0x5B	; 91
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 e4       	ldi	r24, 0x40	; 64
    251c:	80 83       	st	Z, r24
	sei();
    251e:	78 94       	sei
uint16_t time_in_second;
char option;
LCDIntiat();
    2520:	0e 94 43 08 	call	0x1086	; 0x1086 <LCDIntiat>
iniatUart(9600);
    2524:	80 e8       	ldi	r24, 0x80	; 128
    2526:	95 e2       	ldi	r25, 0x25	; 37
    2528:	0e 94 98 06 	call	0xd30	; 0xd30 <iniatUart>


ALARM_DIR|=1<<ALARM_PIN;
    252c:	a7 e3       	ldi	r26, 0x37	; 55
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e7 e3       	ldi	r30, 0x37	; 55
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	84 60       	ori	r24, 0x04	; 4
    2538:	8c 93       	st	X, r24
ALA_DIR|=1<<ALA_PIN;
    253a:	aa e3       	ldi	r26, 0x3A	; 58
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	ea e3       	ldi	r30, 0x3A	; 58
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	81 60       	ori	r24, 0x01	; 1
    2546:	8c 93       	st	X, r24

while(1)
{


	option=read_option();
    2548:	0e 94 6f 13 	call	0x26de	; 0x26de <read_option>
    254c:	8f 87       	std	Y+15, r24	; 0x0f
	time_in_second=read_entered_time();
    254e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <read_entered_time>
    2552:	99 8b       	std	Y+17, r25	; 0x11
    2554:	88 8b       	std	Y+16, r24	; 0x10
	if(wait_start_or_cancel() == '=' )
    2556:	0e 94 b8 13 	call	0x2770	; 0x2770 <wait_start_or_cancel>
    255a:	8d 33       	cpi	r24, 0x3D	; 61
    255c:	09 f0       	breq	.+2      	; 0x2560 <main+0x66>
    255e:	bc c0       	rjmp	.+376    	; 0x26d8 <main+0x1de>

	{
		LCDClearScreen();
    2560:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
		operation_show(option);
    2564:	8f 85       	ldd	r24, Y+15	; 0x0f
    2566:	0e 94 79 15 	call	0x2af2	; 0x2af2 <operation_show>
		MOTOR_START(option);
    256a:	8f 85       	ldd	r24, Y+15	; 0x0f
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 01       	movw	r18, r24
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	c9 01       	movw	r24, r18
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	82 0f       	add	r24, r18
    2582:	93 1f       	adc	r25, r19
    2584:	80 59       	subi	r24, 0x90	; 144
    2586:	0e 94 74 06 	call	0xce8	; 0xce8 <pwm_timer0>
		ALA_START();
    258a:	ab e3       	ldi	r26, 0x3B	; 59
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	eb e3       	ldi	r30, 0x3B	; 59
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	81 60       	ori	r24, 0x01	; 1
    2596:	8c 93       	st	X, r24
		counter_show(time_in_second);
    2598:	88 89       	ldd	r24, Y+16	; 0x10
    259a:	99 89       	ldd	r25, Y+17	; 0x11
    259c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <counter_show>
		MOTOR_STOP();
    25a0:	e3 e5       	ldi	r30, 0x53	; 83
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	10 82       	st	Z, r1
    25a6:	ab e3       	ldi	r26, 0x3B	; 59
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	eb e3       	ldi	r30, 0x3B	; 59
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	8e 7f       	andi	r24, 0xFE	; 254
    25b2:	8c 93       	st	X, r24
		 ALA_STOP();
    25b4:	ab e3       	ldi	r26, 0x3B	; 59
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e3       	ldi	r30, 0x3B	; 59
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8e 7f       	andi	r24, 0xFE	; 254
    25c0:	8c 93       	st	X, r24
		if(is_stop_forced==0)
    25c2:	80 91 fe 00 	lds	r24, 0x00FE
    25c6:	88 23       	and	r24, r24
    25c8:	09 f0       	breq	.+2      	; 0x25cc <main+0xd2>
    25ca:	86 c0       	rjmp	.+268    	; 0x26d8 <main+0x1de>
		{
			LCDPrint("finished!!!!");
    25cc:	80 e6       	ldi	r24, 0x60	; 96
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
			ALARM_START();
    25d4:	a8 e3       	ldi	r26, 0x38	; 56
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e8 e3       	ldi	r30, 0x38	; 56
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	84 60       	ori	r24, 0x04	; 4
    25e0:	8c 93       	st	X, r24
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a8 e4       	ldi	r26, 0x48	; 72
    25e8:	b3 e4       	ldi	r27, 0x43	; 67
    25ea:	8b 87       	std	Y+11, r24	; 0x0b
    25ec:	9c 87       	std	Y+12, r25	; 0x0c
    25ee:	ad 87       	std	Y+13, r26	; 0x0d
    25f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a ef       	ldi	r20, 0xFA	; 250
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	8f 83       	std	Y+7, r24	; 0x07
    260c:	98 87       	std	Y+8, r25	; 0x08
    260e:	a9 87       	std	Y+9, r26	; 0x09
    2610:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2612:	6f 81       	ldd	r22, Y+7	; 0x07
    2614:	78 85       	ldd	r23, Y+8	; 0x08
    2616:	89 85       	ldd	r24, Y+9	; 0x09
    2618:	9a 85       	ldd	r25, Y+10	; 0x0a
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2626:	88 23       	and	r24, r24
    2628:	2c f4       	brge	.+10     	; 0x2634 <main+0x13a>
		__ticks = 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
    2632:	3f c0       	rjmp	.+126    	; 0x26b2 <main+0x1b8>
	else if (__tmp > 65535)
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	4c f5       	brge	.+82     	; 0x269e <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	6b 85       	ldd	r22, Y+11	; 0x0b
    264e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2650:	8d 85       	ldd	r24, Y+13	; 0x0d
    2652:	9e 85       	ldd	r25, Y+14	; 0x0e
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <main+0x19a>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9c 83       	std	Y+4, r25	; 0x04
    267c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <main+0x188>
    2686:	9c 83       	std	Y+4, r25	; 0x04
    2688:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <main+0x17c>
    269c:	14 c0       	rjmp	.+40     	; 0x26c6 <main+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9e 83       	std	Y+6, r25	; 0x06
    26b0:	8d 83       	std	Y+5, r24	; 0x05
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <main+0x1c4>
    26c2:	9a 83       	std	Y+2, r25	; 0x02
    26c4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			ALARM_STOP();
    26c6:	a8 e3       	ldi	r26, 0x38	; 56
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e8 e3       	ldi	r30, 0x38	; 56
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	8b 7f       	andi	r24, 0xFB	; 251
    26d2:	8c 93       	st	X, r24
			LCDClearScreen();
    26d4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
	}
	else
	{
		//cancel
	}
	is_stop_forced=0;
    26d8:	10 92 fe 00 	sts	0x00FE, r1
    26dc:	35 cf       	rjmp	.-406    	; 0x2548 <main+0x4e>

000026de <read_option>:
return 0;
}


char read_option()
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62

	LCDPrint("A-COOKING C-POPCB-DEFROST D-BAKE");
    26e6:	8d e6       	ldi	r24, 0x6D	; 109
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>


	return receiveChar();
    26ee:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <receiveChar>
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <read_entered_time>:
uint16_t read_entered_time()
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <read_entered_time+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <read_entered_time+0x8>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
	uint16_t time=0;
    2704:	1c 82       	std	Y+4, r1	; 0x04
    2706:	1b 82       	std	Y+3, r1	; 0x03
	char ch;
	char counter=3;
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	89 83       	std	Y+1, r24	; 0x01
	LCDClearScreen();
    270c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
	LCDPrint("OP TIME:");
    2710:	8e e8       	ldi	r24, 0x8E	; 142
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
	do
	{

		ch=receiveChar();
    2718:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <receiveChar>
    271c:	8a 83       	std	Y+2, r24	; 0x02
		if(ch >='0' && ch <= '9')
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	80 33       	cpi	r24, 0x30	; 48
    2722:	d0 f0       	brcs	.+52     	; 0x2758 <read_entered_time+0x60>
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	8a 33       	cpi	r24, 0x3A	; 58
    2728:	b8 f4       	brcc	.+46     	; 0x2758 <read_entered_time+0x60>
		{
			LCDSendChar(ch);
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCDSendChar>
			time=time*10+ (ch-48);
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	9c 01       	movw	r18, r24
    2736:	22 0f       	add	r18, r18
    2738:	33 1f       	adc	r19, r19
    273a:	c9 01       	movw	r24, r18
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	28 0f       	add	r18, r24
    2746:	39 1f       	adc	r19, r25
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	82 0f       	add	r24, r18
    2750:	93 1f       	adc	r25, r19
    2752:	c0 97       	sbiw	r24, 0x30	; 48
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
		}

	}while(ch!= '=');
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	8d 33       	cpi	r24, 0x3D	; 61
    275c:	e9 f6       	brne	.-70     	; 0x2718 <read_entered_time+0x20>


	return time;
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04

}
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <wait_start_or_cancel>:
char wait_start_or_cancel()
{
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	0f 92       	push	r0
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
	char ch;
	LCDClearScreen();
    277a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
	LCDPrint("PUSH START :) ");
    277e:	87 e9       	ldi	r24, 0x97	; 151
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
	do{
		ch=receiveChar();
    2786:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <receiveChar>
    278a:	89 83       	std	Y+1, r24	; 0x01
	}
	while( ch != '=' && ch != '<' );
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	8d 33       	cpi	r24, 0x3D	; 61
    2790:	19 f0       	breq	.+6      	; 0x2798 <wait_start_or_cancel+0x28>
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	8c 33       	cpi	r24, 0x3C	; 60
    2796:	b9 f7       	brne	.-18     	; 0x2786 <wait_start_or_cancel+0x16>
	return ch;
    2798:	89 81       	ldd	r24, Y+1	; 0x01
}
    279a:	0f 90       	pop	r0
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <counter_show>:
void counter_show(uint16_t time )
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	62 97       	sbiw	r28, 0x12	; 18
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	9a 8b       	std	Y+18, r25	; 0x12
    27b8:	89 8b       	std	Y+17, r24	; 0x11
	char time1,time0;

	time1=time/100;
    27ba:	89 89       	ldd	r24, Y+17	; 0x11
    27bc:	9a 89       	ldd	r25, Y+18	; 0x12
    27be:	24 e6       	ldi	r18, 0x64	; 100
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	b9 01       	movw	r22, r18
    27c4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__udivmodhi4>
    27c8:	cb 01       	movw	r24, r22
    27ca:	88 8b       	std	Y+16, r24	; 0x10
	time0=time%100;
    27cc:	89 89       	ldd	r24, Y+17	; 0x11
    27ce:	9a 89       	ldd	r25, Y+18	; 0x12
    27d0:	24 e6       	ldi	r18, 0x64	; 100
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	b9 01       	movw	r22, r18
    27d6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__udivmodhi4>
    27da:	8f 87       	std	Y+15, r24	; 0x0f
	if(is_stop_forced==0)
    27dc:	80 91 fe 00 	lds	r24, 0x00FE
    27e0:	88 23       	and	r24, r24
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <counter_show+0x44>
    27e4:	7b c1       	rjmp	.+758    	; 0x2adc <counter_show+0x33a>
	{
		LCDRowColumn(2,1);
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>

		LCDPrint("Time:");
    27ee:	86 ea       	ldi	r24, 0xA6	; 166
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
    27f6:	6a c1       	rjmp	.+724    	; 0x2acc <counter_show+0x32a>
		while((time1!=0)||(time0!=0))
		{
			if(is_stop_forced==1)
    27f8:	80 91 fe 00 	lds	r24, 0x00FE
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	09 f0       	breq	.+2      	; 0x2802 <counter_show+0x60>
    2800:	85 c0       	rjmp	.+266    	; 0x290c <counter_show+0x16a>
				{
					MOTOR_STOP();
    2802:	e3 e5       	ldi	r30, 0x53	; 83
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	10 82       	st	Z, r1
    2808:	ab e3       	ldi	r26, 0x3B	; 59
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	eb e3       	ldi	r30, 0x3B	; 59
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	8e 7f       	andi	r24, 0xFE	; 254
    2814:	8c 93       	st	X, r24
					LCDClearScreen();
    2816:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
					LCDPrint("OPERATION IS STOP:(");
    281a:	8c ea       	ldi	r24, 0xAC	; 172
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a8 ec       	ldi	r26, 0xC8	; 200
    2828:	b2 e4       	ldi	r27, 0x42	; 66
    282a:	8b 87       	std	Y+11, r24	; 0x0b
    282c:	9c 87       	std	Y+12, r25	; 0x0c
    282e:	ad 87       	std	Y+13, r26	; 0x0d
    2830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
    284e:	a9 87       	std	Y+9, r26	; 0x09
    2850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <counter_show+0xd2>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <counter_show+0x150>
	else if (__tmp > 65535)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <counter_show+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <counter_show+0x132>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <counter_show+0x120>
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <counter_show+0x114>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <counter_show+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <counter_show+0x15c>
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(100);
					LCDClearScreen();
    2906:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
    290a:	ea c0       	rjmp	.+468    	; 0x2ae0 <counter_show+0x33e>
					return ;
				}


			if((time0==0)&&(time1>=1))
    290c:	8f 85       	ldd	r24, Y+15	; 0x0f
    290e:	88 23       	and	r24, r24
    2910:	c1 f5       	brne	.+112    	; 0x2982 <counter_show+0x1e0>
    2912:	88 89       	ldd	r24, Y+16	; 0x10
    2914:	88 23       	and	r24, r24
    2916:	a9 f1       	breq	.+106    	; 0x2982 <counter_show+0x1e0>
			{
				time1--;
    2918:	88 89       	ldd	r24, Y+16	; 0x10
    291a:	81 50       	subi	r24, 0x01	; 1
    291c:	88 8b       	std	Y+16, r24	; 0x10
				time0=59;
    291e:	8b e3       	ldi	r24, 0x3B	; 59
    2920:	8f 87       	std	Y+15, r24	; 0x0f
				LCDRowColumn(2,6);
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	66 e0       	ldi	r22, 0x06	; 6
    2926:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
							LCDPrint("  ");
    292a:	80 ec       	ldi	r24, 0xC0	; 192
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>

									LCDRowColumn(2,6);
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	66 e0       	ldi	r22, 0x06	; 6
    2936:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
									LCDPrint( intToString(time1) );
    293a:	88 89       	ldd	r24, Y+16	; 0x10
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    2944:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
									LCDRowColumn(2,8);
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	68 e0       	ldi	r22, 0x08	; 8
    294c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
									LCDPrint(":");
    2950:	83 ec       	ldi	r24, 0xC3	; 195
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
									LCDRowColumn(2,9);
    2958:	82 e0       	ldi	r24, 0x02	; 2
    295a:	69 e0       	ldi	r22, 0x09	; 9
    295c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
								    LCDPrint("  ");
    2960:	80 ec       	ldi	r24, 0xC0	; 192
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
									LCDRowColumn(2,9);
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	69 e0       	ldi	r22, 0x09	; 9
    296c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
									LCDPrint( intToString(time0) );
    2970:	8f 85       	ldd	r24, Y+15	; 0x0f
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    297a:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>


									timer1_delay_1s();
    297e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <timer1_delay_1s>
			}
			if(time0>1){
    2982:	8f 85       	ldd	r24, Y+15	; 0x0f
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	98 f1       	brcs	.+102    	; 0x29ee <counter_show+0x24c>

			LCDRowColumn(2,6);
    2988:	82 e0       	ldi	r24, 0x02	; 2
    298a:	66 e0       	ldi	r22, 0x06	; 6
    298c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
			LCDPrint("  ");
    2990:	80 ec       	ldi	r24, 0xC0	; 192
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>

					LCDRowColumn(2,6);
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	66 e0       	ldi	r22, 0x06	; 6
    299c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
					LCDPrint( intToString(time1) );
    29a0:	88 89       	ldd	r24, Y+16	; 0x10
    29a2:	88 2f       	mov	r24, r24
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    29aa:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
					LCDRowColumn(2,8);
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	68 e0       	ldi	r22, 0x08	; 8
    29b2:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
					LCDPrint(":");
    29b6:	83 ec       	ldi	r24, 0xC3	; 195
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
					LCDRowColumn(2,9);
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	69 e0       	ldi	r22, 0x09	; 9
    29c2:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				    LCDPrint("  ");
    29c6:	80 ec       	ldi	r24, 0xC0	; 192
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
					LCDRowColumn(2,9);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	69 e0       	ldi	r22, 0x09	; 9
    29d2:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
					LCDPrint( intToString(time0) );
    29d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    29e0:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>

					time0--;
    29e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e6:	81 50       	subi	r24, 0x01	; 1
    29e8:	8f 87       	std	Y+15, r24	; 0x0f
					timer1_delay_1s();
    29ea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <timer1_delay_1s>


			}
			if(time0==1){
    29ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <counter_show+0x254>
    29f4:	6b c0       	rjmp	.+214    	; 0x2acc <counter_show+0x32a>


				LCDRowColumn(2,6);
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	66 e0       	ldi	r22, 0x06	; 6
    29fa:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				LCDPrint("  ");
    29fe:	80 ec       	ldi	r24, 0xC0	; 192
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>

				LCDRowColumn(2,6);
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	66 e0       	ldi	r22, 0x06	; 6
    2a0a:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				LCDPrint( intToString(time1) );
    2a0e:	88 89       	ldd	r24, Y+16	; 0x10
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    2a18:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
				LCDRowColumn(2,8);
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	68 e0       	ldi	r22, 0x08	; 8
    2a20:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
			    LCDPrint(":");
    2a24:	83 ec       	ldi	r24, 0xC3	; 195
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
			    LCDRowColumn(2,9);
    2a2c:	82 e0       	ldi	r24, 0x02	; 2
    2a2e:	69 e0       	ldi	r22, 0x09	; 9
    2a30:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
			    LCDPrint("  ");
    2a34:	80 ec       	ldi	r24, 0xC0	; 192
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>


				LCDRowColumn(2,9);
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	69 e0       	ldi	r22, 0x09	; 9
    2a40:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				LCDPrint( intToString(time0) );
    2a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a46:	88 2f       	mov	r24, r24
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    2a4e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>


				timer1_delay_1s();
    2a52:	0e 94 4f 06 	call	0xc9e	; 0xc9e <timer1_delay_1s>

				time0--;
    2a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a58:	81 50       	subi	r24, 0x01	; 1
    2a5a:	8f 87       	std	Y+15, r24	; 0x0f

				LCDRowColumn(2,6);
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	66 e0       	ldi	r22, 0x06	; 6
    2a60:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				LCDPrint("  ");
    2a64:	80 ec       	ldi	r24, 0xC0	; 192
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>

				LCDRowColumn(2,6);
    2a6c:	82 e0       	ldi	r24, 0x02	; 2
    2a6e:	66 e0       	ldi	r22, 0x06	; 6
    2a70:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				LCDPrint( intToString(time1) );
    2a74:	88 89       	ldd	r24, Y+16	; 0x10
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    2a7e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
				LCDRowColumn(2,8);
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	68 e0       	ldi	r22, 0x08	; 8
    2a86:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				LCDPrint(":");
    2a8a:	83 ec       	ldi	r24, 0xC3	; 195
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
				LCDRowColumn(2,9);
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	69 e0       	ldi	r22, 0x09	; 9
    2a96:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
				LCDPrint("  ");
    2a9a:	80 ec       	ldi	r24, 0xC0	; 192
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>


			  LCDRowColumn(2,9);
    2aa2:	82 e0       	ldi	r24, 0x02	; 2
    2aa4:	69 e0       	ldi	r22, 0x09	; 9
    2aa6:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCDRowColumn>
			LCDPrint( intToString(time0) );
    2aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 be 07 	call	0xf7c	; 0xf7c <intToString>
    2ab4:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
			timer1_delay_1s();
    2ab8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <timer1_delay_1s>

			if(time1==0)
    2abc:	88 89       	ldd	r24, Y+16	; 0x10
    2abe:	88 23       	and	r24, r24
    2ac0:	69 f0       	breq	.+26     	; 0x2adc <counter_show+0x33a>
			{
				break;
			}
			else{
				time0=59;
    2ac2:	8b e3       	ldi	r24, 0x3B	; 59
    2ac4:	8f 87       	std	Y+15, r24	; 0x0f
				 time1--;
    2ac6:	88 89       	ldd	r24, Y+16	; 0x10
    2ac8:	81 50       	subi	r24, 0x01	; 1
    2aca:	88 8b       	std	Y+16, r24	; 0x10
	if(is_stop_forced==0)
	{
		LCDRowColumn(2,1);

		LCDPrint("Time:");
		while((time1!=0)||(time0!=0))
    2acc:	88 89       	ldd	r24, Y+16	; 0x10
    2ace:	88 23       	and	r24, r24
    2ad0:	09 f0       	breq	.+2      	; 0x2ad4 <counter_show+0x332>
    2ad2:	92 ce       	rjmp	.-732    	; 0x27f8 <counter_show+0x56>
    2ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad6:	88 23       	and	r24, r24
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <counter_show+0x33a>
    2ada:	8e ce       	rjmp	.-740    	; 0x27f8 <counter_show+0x56>



			}
	}
	LCDClearScreen();
    2adc:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
}
    2ae0:	62 96       	adiw	r28, 0x12	; 18
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <operation_show>:

void operation_show(char option)
{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <operation_show+0x6>
    2af8:	0f 92       	push	r0
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	89 83       	std	Y+1, r24	; 0x01
	if(is_stop_forced==0)
    2b00:	80 91 fe 00 	lds	r24, 0x00FE
    2b04:	88 23       	and	r24, r24
    2b06:	c1 f5       	brne	.+112    	; 0x2b78 <operation_show+0x86>
	  {
		LCDClearScreen();
    2b08:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCDClearScreen>
		LCDPrint("RUNNING:");
    2b0c:	85 ec       	ldi	r24, 0xC5	; 197
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
		switch(option)
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	3b 83       	std	Y+3, r19	; 0x03
    2b1c:	2a 83       	std	Y+2, r18	; 0x02
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	8b 32       	cpi	r24, 0x2B	; 43
    2b24:	91 05       	cpc	r25, r1
    2b26:	21 f1       	breq	.+72     	; 0x2b70 <operation_show+0x7e>
    2b28:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b2c:	2c 32       	cpi	r18, 0x2C	; 44
    2b2e:	31 05       	cpc	r19, r1
    2b30:	34 f4       	brge	.+12     	; 0x2b3e <operation_show+0x4c>
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	9b 81       	ldd	r25, Y+3	; 0x03
    2b36:	8a 32       	cpi	r24, 0x2A	; 42
    2b38:	91 05       	cpc	r25, r1
    2b3a:	81 f0       	breq	.+32     	; 0x2b5c <operation_show+0x6a>
    2b3c:	1d c0       	rjmp	.+58     	; 0x2b78 <operation_show+0x86>
    2b3e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b40:	3b 81       	ldd	r19, Y+3	; 0x03
    2b42:	2d 32       	cpi	r18, 0x2D	; 45
    2b44:	31 05       	cpc	r19, r1
    2b46:	79 f0       	breq	.+30     	; 0x2b66 <operation_show+0x74>
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	8f 32       	cpi	r24, 0x2F	; 47
    2b4e:	91 05       	cpc	r25, r1
    2b50:	99 f4       	brne	.+38     	; 0x2b78 <operation_show+0x86>
		{
		case '/':
				LCDPrint("Cooking");
    2b52:	8e ec       	ldi	r24, 0xCE	; 206
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
    2b5a:	0e c0       	rjmp	.+28     	; 0x2b78 <operation_show+0x86>
				break;
		case '*':
				LCDPrint("Defrost");
    2b5c:	86 ed       	ldi	r24, 0xD6	; 214
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
    2b64:	09 c0       	rjmp	.+18     	; 0x2b78 <operation_show+0x86>
				break;
		case '-':
				LCDPrint("Popcorn");
    2b66:	8e ed       	ldi	r24, 0xDE	; 222
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <operation_show+0x86>
				break;
		case '+':
				LCDPrint("Bake");
    2b70:	86 ee       	ldi	r24, 0xE6	; 230
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 3e 12 	call	0x247c	; 0x247c <LCDPrint>
				break;

		}
	  }

}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <__vector_1>:

ISR(INT0_vect)
{
    2b84:	1f 92       	push	r1
    2b86:	0f 92       	push	r0
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	0f 92       	push	r0
    2b8c:	11 24       	eor	r1, r1
    2b8e:	8f 93       	push	r24
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62


	is_stop_forced=1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	80 93 fe 00 	sts	0x00FE, r24

}
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	8f 91       	pop	r24
    2ba4:	0f 90       	pop	r0
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	0f 90       	pop	r0
    2baa:	1f 90       	pop	r1
    2bac:	18 95       	reti

00002bae <__udivmodhi4>:
    2bae:	aa 1b       	sub	r26, r26
    2bb0:	bb 1b       	sub	r27, r27
    2bb2:	51 e1       	ldi	r21, 0x11	; 17
    2bb4:	07 c0       	rjmp	.+14     	; 0x2bc4 <__udivmodhi4_ep>

00002bb6 <__udivmodhi4_loop>:
    2bb6:	aa 1f       	adc	r26, r26
    2bb8:	bb 1f       	adc	r27, r27
    2bba:	a6 17       	cp	r26, r22
    2bbc:	b7 07       	cpc	r27, r23
    2bbe:	10 f0       	brcs	.+4      	; 0x2bc4 <__udivmodhi4_ep>
    2bc0:	a6 1b       	sub	r26, r22
    2bc2:	b7 0b       	sbc	r27, r23

00002bc4 <__udivmodhi4_ep>:
    2bc4:	88 1f       	adc	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	5a 95       	dec	r21
    2bca:	a9 f7       	brne	.-22     	; 0x2bb6 <__udivmodhi4_loop>
    2bcc:	80 95       	com	r24
    2bce:	90 95       	com	r25
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	08 95       	ret

00002bd6 <__divmodhi4>:
    2bd6:	97 fb       	bst	r25, 7
    2bd8:	09 2e       	mov	r0, r25
    2bda:	07 26       	eor	r0, r23
    2bdc:	0a d0       	rcall	.+20     	; 0x2bf2 <__divmodhi4_neg1>
    2bde:	77 fd       	sbrc	r23, 7
    2be0:	04 d0       	rcall	.+8      	; 0x2bea <__divmodhi4_neg2>
    2be2:	e5 df       	rcall	.-54     	; 0x2bae <__udivmodhi4>
    2be4:	06 d0       	rcall	.+12     	; 0x2bf2 <__divmodhi4_neg1>
    2be6:	00 20       	and	r0, r0
    2be8:	1a f4       	brpl	.+6      	; 0x2bf0 <__divmodhi4_exit>

00002bea <__divmodhi4_neg2>:
    2bea:	70 95       	com	r23
    2bec:	61 95       	neg	r22
    2bee:	7f 4f       	sbci	r23, 0xFF	; 255

00002bf0 <__divmodhi4_exit>:
    2bf0:	08 95       	ret

00002bf2 <__divmodhi4_neg1>:
    2bf2:	f6 f7       	brtc	.-4      	; 0x2bf0 <__divmodhi4_exit>
    2bf4:	90 95       	com	r25
    2bf6:	81 95       	neg	r24
    2bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfa:	08 95       	ret

00002bfc <__divmodsi4>:
    2bfc:	97 fb       	bst	r25, 7
    2bfe:	09 2e       	mov	r0, r25
    2c00:	05 26       	eor	r0, r21
    2c02:	0e d0       	rcall	.+28     	; 0x2c20 <__divmodsi4_neg1>
    2c04:	57 fd       	sbrc	r21, 7
    2c06:	04 d0       	rcall	.+8      	; 0x2c10 <__divmodsi4_neg2>
    2c08:	14 d0       	rcall	.+40     	; 0x2c32 <__udivmodsi4>
    2c0a:	0a d0       	rcall	.+20     	; 0x2c20 <__divmodsi4_neg1>
    2c0c:	00 1c       	adc	r0, r0
    2c0e:	38 f4       	brcc	.+14     	; 0x2c1e <__divmodsi4_exit>

00002c10 <__divmodsi4_neg2>:
    2c10:	50 95       	com	r21
    2c12:	40 95       	com	r20
    2c14:	30 95       	com	r19
    2c16:	21 95       	neg	r18
    2c18:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2c1c:	5f 4f       	sbci	r21, 0xFF	; 255

00002c1e <__divmodsi4_exit>:
    2c1e:	08 95       	ret

00002c20 <__divmodsi4_neg1>:
    2c20:	f6 f7       	brtc	.-4      	; 0x2c1e <__divmodsi4_exit>
    2c22:	90 95       	com	r25
    2c24:	80 95       	com	r24
    2c26:	70 95       	com	r23
    2c28:	61 95       	neg	r22
    2c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c30:	08 95       	ret

00002c32 <__udivmodsi4>:
    2c32:	a1 e2       	ldi	r26, 0x21	; 33
    2c34:	1a 2e       	mov	r1, r26
    2c36:	aa 1b       	sub	r26, r26
    2c38:	bb 1b       	sub	r27, r27
    2c3a:	fd 01       	movw	r30, r26
    2c3c:	0d c0       	rjmp	.+26     	; 0x2c58 <__udivmodsi4_ep>

00002c3e <__udivmodsi4_loop>:
    2c3e:	aa 1f       	adc	r26, r26
    2c40:	bb 1f       	adc	r27, r27
    2c42:	ee 1f       	adc	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	a2 17       	cp	r26, r18
    2c48:	b3 07       	cpc	r27, r19
    2c4a:	e4 07       	cpc	r30, r20
    2c4c:	f5 07       	cpc	r31, r21
    2c4e:	20 f0       	brcs	.+8      	; 0x2c58 <__udivmodsi4_ep>
    2c50:	a2 1b       	sub	r26, r18
    2c52:	b3 0b       	sbc	r27, r19
    2c54:	e4 0b       	sbc	r30, r20
    2c56:	f5 0b       	sbc	r31, r21

00002c58 <__udivmodsi4_ep>:
    2c58:	66 1f       	adc	r22, r22
    2c5a:	77 1f       	adc	r23, r23
    2c5c:	88 1f       	adc	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	1a 94       	dec	r1
    2c62:	69 f7       	brne	.-38     	; 0x2c3e <__udivmodsi4_loop>
    2c64:	60 95       	com	r22
    2c66:	70 95       	com	r23
    2c68:	80 95       	com	r24
    2c6a:	90 95       	com	r25
    2c6c:	9b 01       	movw	r18, r22
    2c6e:	ac 01       	movw	r20, r24
    2c70:	bd 01       	movw	r22, r26
    2c72:	cf 01       	movw	r24, r30
    2c74:	08 95       	ret

00002c76 <__prologue_saves__>:
    2c76:	2f 92       	push	r2
    2c78:	3f 92       	push	r3
    2c7a:	4f 92       	push	r4
    2c7c:	5f 92       	push	r5
    2c7e:	6f 92       	push	r6
    2c80:	7f 92       	push	r7
    2c82:	8f 92       	push	r8
    2c84:	9f 92       	push	r9
    2c86:	af 92       	push	r10
    2c88:	bf 92       	push	r11
    2c8a:	cf 92       	push	r12
    2c8c:	df 92       	push	r13
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	ca 1b       	sub	r28, r26
    2ca0:	db 0b       	sbc	r29, r27
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	09 94       	ijmp

00002cae <__epilogue_restores__>:
    2cae:	2a 88       	ldd	r2, Y+18	; 0x12
    2cb0:	39 88       	ldd	r3, Y+17	; 0x11
    2cb2:	48 88       	ldd	r4, Y+16	; 0x10
    2cb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cba:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cbc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cbe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cc0:	b9 84       	ldd	r11, Y+9	; 0x09
    2cc2:	c8 84       	ldd	r12, Y+8	; 0x08
    2cc4:	df 80       	ldd	r13, Y+7	; 0x07
    2cc6:	ee 80       	ldd	r14, Y+6	; 0x06
    2cc8:	fd 80       	ldd	r15, Y+5	; 0x05
    2cca:	0c 81       	ldd	r16, Y+4	; 0x04
    2ccc:	1b 81       	ldd	r17, Y+3	; 0x03
    2cce:	aa 81       	ldd	r26, Y+2	; 0x02
    2cd0:	b9 81       	ldd	r27, Y+1	; 0x01
    2cd2:	ce 0f       	add	r28, r30
    2cd4:	d1 1d       	adc	r29, r1
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	ed 01       	movw	r28, r26
    2ce2:	08 95       	ret

00002ce4 <_exit>:
    2ce4:	f8 94       	cli

00002ce6 <__stop_program>:
    2ce6:	ff cf       	rjmp	.-2      	; 0x2ce6 <__stop_program>
